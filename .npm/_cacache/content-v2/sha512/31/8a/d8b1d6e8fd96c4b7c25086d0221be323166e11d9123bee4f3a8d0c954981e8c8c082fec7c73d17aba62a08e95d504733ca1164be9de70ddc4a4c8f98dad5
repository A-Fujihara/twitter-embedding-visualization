{"_id":"@imgix/js-core","_rev":"36-d464a79d98e4e9060ad27b64f2cdadd9","name":"@imgix/js-core","dist-tags":{"next":"3.6.1-rc.1","latest":"3.8.0"},"versions":{"3.0.0-beta.2":{"name":"@imgix/js-core","version":"3.0.0-beta.2","license":"BSD-2-Clause","_id":"@imgix/js-core@3.0.0-beta.2","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"3fd9848b8fa541b602f59cdd178a7c570daed2bd","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.0.0-beta.2.tgz","fileCount":12,"integrity":"sha512-4ElxuNYU7GDeb6FFdkEaFGUJOn+hicYlJDUj8pky/EUT1YDdUC61zmGrMJ3u5yzHWoGHuuMkP5yE1tuJ3GvDBg==","signatures":[{"sig":"MEUCICcaOYwC3t0hoBQiiZidgVBBvFtWUEduq9pD4FramxQYAiEAkRGWupiZv5TO+u6xcUJaCXm4Td7va2pcICUZM4MD3IM=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":76301,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgOU4XCRA9TVsSAnZWagAAMCUP/1WBYp47TFbAAHrjmoel\nW4S6I2iiSYKoI8NZzId6IwjcQ8XT6CojAl0d4iIcnxpps3zejivsl2Mpm/f5\naM6w1Ejd8z1jaRrN1FHThOmFGARoDdSkHZMpq/BB4BI98lDkUvROXR0qMdk8\nZezUe9QkNlSflne+xqpHy32Y2WMHwv89R7YPlqc+ntWxvyaPa7cFYHfrKKW5\nH6hA0nQSiCiaFZHZtbirTnxDkvlmDOIMJtN7NOYJY6krHfukeJAMZi55tZfx\nUMKe1Iwb+FBdEl1i2PV/HcDd7LDfVxbiDCL8646ZtL7JPv+0yNRs0NhZzGAm\n7zCe7VNBQsLf9XrTBPJHuwtAYrNN+xiYpcCGEbUDyiHo2UoHJO7VmKa14ZoO\ndDoT7tvStQ21otYy0byCnjlqfb5nM+hUHNxYN9pXQTUuxArAQHriWTYCpq/7\nDzKnSNyq0ciHZCz6j7Adh3B6CNnCM9WoXSd5usd2ET8ExyltJdO5LD62vNqO\n0DgPhdEwE3E72VBsHwYmJNPNmz1vaLNNqO5NjQoqoStbLk86aNuGQg4N9BQb\nc9Bse7wS5A9JOjnt4cnhr1iiVEpdfby35J2TfkkfPlw9A30a3EPKpseO77pJ\nseN7Oy+s0f70jvRW3qm7fQfo5qFRVDlPkcQR55Gj9zGQjoTcgmgNWFiSV/ds\njRrw\r\n=pJSK\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","type":"module","types":"dist/imgix-js-core.d.ts","module":"dist/index.esm.js","browser":"dist/imgix-js-core.umd.js","gitHead":"914beef858453bd17f73de24b8dddb46af56bbec","scripts":{"dev":"rollup -c -w","test":"mocha ./test/*.mjs","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.mjs'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","pretest":"npm run build","prepublish":"npm run build && npm run compile && npm run assert_version","assert_version":"node assert_version.cjs","test:performance":"mocha test/performance/*.mjs"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.0","sinon":"9.2.4","rollup":"1.32.1","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.12.8","typescript":"4.2.2","@babel/core":"7.12.17","@babel/register":"7.12.13","@babel/preset-env":"7.12.17","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"4.2.4"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.0.0-beta.2_1614368278511_0.8639659485052738","host":"s3://npm-registry-packages"}},"3.0.0-beta.3":{"name":"@imgix/js-core","version":"3.0.0-beta.3","license":"BSD-2-Clause","_id":"@imgix/js-core@3.0.0-beta.3","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"d3818bec2c55916580148936704c5495bc269429","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.0.0-beta.3.tgz","fileCount":12,"integrity":"sha512-AuVJ3Lo4+rsk2/6pZd3GvMloa1QfrsyJhVkjv3ZKnMXkMQPSPEuXkGDJCOxz8Lns7WuWM8fzUR5v5duyymLUiA==","signatures":[{"sig":"MEQCIHDwi/5sgtwSBK9eeph9eXA5O4CKK7GCtPTtynnZym6BAiAVEbiNKdgmSwKGUfSZIwzk6btWv0VWZel5hA2I/o4fQg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":76228,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgPXYtCRA9TVsSAnZWagAAZ6kQAJd/TnJQ804Gk4U9W+p8\nMOxv6OwWr76QxHAeHhfyGlMfmNteRnCBHuHiFes1dPmd1PyDOG30KlhdOzuQ\nCKu9V8kipT2DLNHcgqCepmn5Ws+wo/XsoABF3cufWs7d/Jkz4iZl6TZM5CEA\nu5nAfbm6li0kx0qyCwclO893Wx075ARHEWCh1hU927Tul3cH6M/e4crVPcbf\nCckvZH56F0N4gPDv6OB0O39rvHS/wjnoQnqjvk//DnI0xQGPLdX/BELPyJsR\nm7puHXF4bJ94rww5pjEMJFjUr+BPo+paxv1QIxwYkMCcpxND/ri7AunWyt86\nHaHsbvravoqjgYzWI87Xb8z9NMMNxSTf30g9rC7I8YnrbX48rqKH63SfLTkM\nuwN+vMUKqZraTmCBEsoBOYtJtVg9B6krbzVgaOk8fbIOsyAtGtgOUcQ5hTPt\njNZ0mKtxHSWw2GM+tITFNvQBssExRTJGy0HkH11CElmaZmwZ8UL8sciHB3nG\n/GhexVb8Q6Q8/ESiN+yeKaScTEoHAd8S5gFkL8MtxuZLKjwsbUGZLhiTyrTR\no9reZBdhhH7yuDD98V65WquaLTA1qOQ+Ci4kMiDtvYjXE5sy9WxcqisDCQjr\nJgZU8XEr6zRd6zzYClQhJuYbyWYWoErnML+wPvLh4Jn4VV8oaBsjtrvxfrDd\nvw6c\r\n=qtIc\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs","type":"module","types":"dist/imgix-js-core.d.ts","module":"dist/index.mjs","browser":"dist/imgix-js-core.umd.js","gitHead":"efbacd79bd3bfc6f0eaeba9b476d3d5601831356","scripts":{"dev":"rollup -c -w","test":"mocha ./test/*.mjs","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.mjs'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","pretest":"npm run build","prepublish":"npm run build && npm run compile && npm run assert_version","assert_version":"node assert_version.cjs","test:performance":"mocha test/performance/*.mjs"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.0","sinon":"9.2.4","rollup":"1.32.1","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.12.8","typescript":"4.2.2","@babel/core":"7.12.17","@babel/register":"7.12.13","@babel/preset-env":"7.12.17","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"4.2.4"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.0.0-beta.3_1614640684469_0.736642948380374","host":"s3://npm-registry-packages"}},"3.0.0-beta.4":{"name":"@imgix/js-core","version":"3.0.0-beta.4","license":"BSD-2-Clause","_id":"@imgix/js-core@3.0.0-beta.4","maintainers":[{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"9a0e2064a8c53237465ab261e2acd4d99d3b3145","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.0.0-beta.4.tgz","fileCount":12,"integrity":"sha512-XPEyxbd1Lrmb+N5H4+ltlomaD5qOe/sfN2H9kV72WklR01x65mfiLlb7XA6gUsSm5TLsi0YlXtsSthL4VYqCBg==","signatures":[{"sig":"MEUCIAGGnbTb0tEqCTHOX1RKyTKfQ/VU7nbl8qO/F/LSM5YuAiEA7gfmqPBo5NxQHI9/YjrS3VSTg2d2wCLzhGEU987mlMc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":77311,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgQYLLCRA9TVsSAnZWagAAvnEP/12PFe9yDd6GXqeqojHe\nyCN+/D0nohQ5OTX/wxcbZ64JE9Pz/vrvTQ4NJ2Ifx56o3n9JOnSkl3yEqNWi\nCuc1ggwTJOdWXLEQ/5MCBMdNio3QwQpAQFapwgfu09sSzXMarDgj5Cdcvsno\nquk30ywnk+7N4OQdVUTWj8Fj9bD7V376nltlmjb5zAbhroiQRUa3ilOUR89W\nFeB3UsyYZdu2r2EnTpI2rAkkNPRJQ7ZVTPosuXhMdH9sTsksebFF5w4ww5Yw\nk8giAShWO9G6QUj0IxbPWFPsjrepDk/RMKbaKvhlBRQUveVddTOwaf7aIwYd\n4yTZFD61BuKu0FKrydpfIzA7a+Z5DODFYwV43JoYRTDXMhteIkwohT6ogYCU\nW54jC5TtJpW0eL4jZUaWfiuE3cJjJK2I8sltbfg9EYdhBxnInqu0/uVWJuOc\nGE1T8n3s1ttYTuMcHlBpBxcxROtuv3HZfBeJufv1eiHTNI6gg5bhkZ2e1VnR\nO/DJ9VBOGv0DTmDkRWqpTOh6nrF7Ab/1oFnYusWNN/efZ9DvTH4LbjO5aj9l\nzwnns0f8Vc8rMMdmY9T4+vuC9NIEMxmEv9NYwyMB5Nso2iTqMYcBwrUFGOIa\nEcmwK7uvZPu7zJXZ2JjIEQ1QvrA/YmL0qvBzZRVZd3o3oMQwH2zSHqgISD4G\noEmY\r\n=J/TU\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs","type":"module","types":"dist/imgix-js-core.d.ts","module":"dist/index.mjs","browser":"dist/imgix-js-core.umd.js","gitHead":"5ee727b92ea397c97d50587b76e6d7e3e7a47563","scripts":{"dev":"rollup -c -w","test":"mocha ./test/*.mjs","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.mjs'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","pretest":"npm run build","prepublish":"npm run build && npm run compile && npm run assert_version","assert_version":"node assert_version.cjs","test:performance":"mocha test/performance/*.mjs"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.0","sinon":"9.2.4","rollup":"1.32.1","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.12.8","typescript":"4.2.2","@babel/core":"7.12.17","@babel/register":"7.12.13","@babel/preset-env":"7.12.17","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"4.2.4"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.0.0-beta.4_1614906058395_0.07735412399365305","host":"s3://npm-registry-packages"}},"3.0.0":{"name":"@imgix/js-core","version":"3.0.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.0.0","maintainers":[{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"5f4e6885a1590c551f75634954e95a6ecd25dd24","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.0.0.tgz","fileCount":12,"integrity":"sha512-MICLapsKH7kAzcvS93mhhE8Mc+Q9eOMcim674Rc4U2ULq+SMeLwYK0nuCeKKedBvRGAjRZNJjobUUyCPEBrU1Q==","signatures":[{"sig":"MEQCIAbkqUv22Ui7yWoAh4+UqtRIM+0YjIlx10ORHrnJlMdFAiBxprrcl8tOVKfSlln9FwJMstYvBnd2DI91js4ZrVcowg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":78318,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgR6fBCRA9TVsSAnZWagAAcLcP/0zSnWorTgkh8Jti+dxU\nT4dHzGu1Lyr7n0K9qfwqMxhLZa7yGDzj2/FdelMvkdFjpflsM1tVwzex0/05\nTWS5begpBSFiV7o70JWumtBWQmgyOl6t3PcgbAo257HjPuvpyewu0mWeHz80\nCWOm2BmKOrg7pA6iWAmLXFybtuVZV23Cgg75kZRWJYVduixQR0G+ZUO18s88\nRduT8A8NyX6cOe6kql7QkT5+G56DEKf99hdRLfhJRNuALYA7YwCFRpJn4TjM\n3ZLgq53su/8JoEO8D5rDSaakMScjQgSFYwtlkI62DpKjo99pmZWOUidjaxG2\nOWFX0Qvwlem/EIqpeRL9+Z3U33A8ZkwXrBruPX/+MmrAnslb8jCvGGq7CRsi\nuthwkBXbFNOUtXU2ZTKftSuN/HyeGss0N5FwtOjy8PuZFS4Z6YvciCgNyvis\n5Ncp5R51/xnUdhfook2RL+nDaXLEAvhyjg4PHG6iNeSQA25LrWIWSsrguVQv\nsvvJJoV3i9kQbWsSMqHvIKdSRxFoOGe4zElpIp8kMrOUyvay7wNt3+WcSwrK\nkczHOP0uTZo6ENGmxKB02ebl6TV61XxxDDnrQnnkK7NAjWGIAJYkgciDhtCD\nm8n71p3sR+AY4KluVyj/BKlUbqEFEgnCHqvKONun+yc5annkjF++x0KGBhTN\nfYPO\r\n=cXLM\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs","type":"module","types":"dist/imgix-js-core.d.ts","module":"dist/index.mjs","browser":"dist/imgix-js-core.umd.js","gitHead":"aa72a391e252d350f91f2f662528778704f75589","scripts":{"dev":"rollup -c -w","test":"mocha ./test/*.mjs","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.mjs'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha test/performance/*.mjs"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.1","sinon":"9.2.4","rollup":"1.32.1","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.12.8","typescript":"4.2.2","@babel/core":"7.12.17","@babel/register":"7.12.13","@babel/preset-env":"7.12.17","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"4.2.4"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.0.0_1615308737177_0.6955701280020374","host":"s3://npm-registry-packages"}},"3.1.0":{"name":"@imgix/js-core","version":"3.1.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.1.0","maintainers":[{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"94076fa62b7426bdf226133861912751288cd66a","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.1.0.tgz","fileCount":12,"integrity":"sha512-ubyMNPleaKMovS/s1HWzTUiDundZULHt7IFuDvqbOxYVSRdsLjhekpZyDHUa6pgz6v2SJ0XJS1HFk2fH3af0ng==","signatures":[{"sig":"MEUCIENr+GRh+8a26xY0A4iOH5QvEgWD8682F/mrb8SIIU1TAiEAkocFCmFSS+ojE4CWsWK7ejfNntDv9HeonaR3KhCuuR4=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":78555,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgR+/qCRA9TVsSAnZWagAAVTYQAKKfhe4iixsnNvS1sIDD\nS5HMLIOiokTta8VR7PRyzGv+7LsUK8QG+YAz3PFS0qbUDcbZJSHtMDIWY+BL\nuaA3vmzr5x4FRYHfx7gnWFhwxwEH/TMc2U/Av6JhEseXxSp8VLzbZy7SOu2/\neK7jfh3IyV7cOzJcnemuj3bobhDFYRtmum8SS5y/f6gyt6H1/1Tm/tF3MC6M\nlW6oHu//D3J+68gLr9uTEGci0eepW7/9Z/pHOBYv6e4yk/zgA/JhpEovROWz\n1izLDpN30gRsATromnzAy/8J4MXW5UfyrbkY8PmN3snJyz4tU4yY9ePjrqZT\n/qMXfuw+no2utsAm0k6ud+iQrPOdAwo//EDCFMLZqoJyJCNsrdpgpNB69ptM\nTXQOIZ2NdmkeWmht/jULBw0JBklOMB9Bz/EptA1hdm+XPmdqhnHIWMXX4ODg\nIyZsSGPcxAbOjWxa1LKtE3SnD/ghNUvM/TjrjlH9AzqsN8/92sLryjj5/rEt\nrE7tNlKUfBq80xJ+Ocndn9voV0Aj1pEQs03HBQzScRYLk1SFqOl5JNyTiZGZ\n38oRJ3GnfUlzj71+/nBbiAYkRdv/ZDJZEPeoG99dKe01uXErZlXZrvPbacUI\nqNo/660X4TZX4hzdgxgjZw0RzHPishMlTAoVDQzMra69M8HAwSNvMoixxvKA\nXxsN\r\n=3cjd\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs","type":"module","types":"dist/imgix-js-core.d.ts","module":"dist/index.mjs","browser":"dist/imgix-js-core.umd.js","gitHead":"04d0a23f4c492c19e4071ca7e0db9b6e7ab85fc8","scripts":{"dev":"rollup -c -w","test":"mocha ./test/*.mjs","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.mjs'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha test/performance/*.mjs"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.1","sinon":"9.2.4","rollup":"1.32.1","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.12.8","typescript":"4.2.2","@babel/core":"7.12.17","@babel/register":"7.12.13","@babel/preset-env":"7.12.17","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"4.2.4"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.1.0_1615327210057_0.9895009228612537","host":"s3://npm-registry-packages"}},"3.1.1":{"name":"@imgix/js-core","version":"3.1.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.1.1","maintainers":[{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"04d4b33e3f7409c7145642a5c3315d4d0ced00e0","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.1.1.tgz","fileCount":12,"integrity":"sha512-tIGTl97MWwGNjPQ8Ar3/ZWBWwHuf4+94ZBoo0zp0/5+a9D583ApriN5HpLqgfubTLStB5x04LxDZYS6BHzTFFA==","signatures":[{"sig":"MEUCICWC2FQMe1LtDEaV+kTTN1pMrBUP/yX84Zos6iTDPAQqAiEAvz7c3xnxPWuPLTygbCkGpHZGvGZ7xLIDjRKBoRO4biY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":78992,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgWm1PCRA9TVsSAnZWagAAEvEP/A3Jg8JY9jM/l5nPL1Q+\nR236LxNXS0UJ8lRYCeBA3dMm6jdtKrUV4fenAMysmyHdSDrgn62zJn2i3dt+\nkyOJYa6NNfUToOWY4+X+KjvcsQehsHXjBVn9mTCZczuaqrTIbGPdhugVp8cW\nEcEHZeYrKIpeYT37rN0GTp7QvbMpzI3vAJ/k25jVr6ThBw3vNCsfeVTPYZ1m\nxAQz+ENXv3viafrWpEEXWCaiwk/EJPp2PRFkCrO9xfa6jU0eZ1wQKMFfSCTy\ndoX3ODcY9M3n8wZzprI8rJVOAQlEsWIt8rq1aYkR+A5c9x0AwgIt2vqhM9WL\nYGooq6Q31HobuEc/K11mm8J3G4Hdon47vY2vK2WQeoDyOzlE+vjlTVBAFT42\ndVKdxqyB3wQqZONTiJq+GDGZP8sGDBSfnIKzl2V+cTxmx2+JLetyRb3s0tC6\nOwbjioctYD1vzqn0UyJgHvKOEPjxCajAUYLn3AU5BCuFXuBu3dQ7b+CQE5gW\nc4636yfGDKhNZN57R/Izr28Zmtps6lheyVuTpHomFNxBuB71/nZ0+M3KkgTJ\npcsFL3ExTNQZUUZ+PCiGXcWjQYrQqxQK311BM9y14PtVViKnEqLFNczVB4Yj\n9L7VRqcazhmxbErCftBrtLXvoA2Hn2V6m6FyH68Xf3tIGOoiolBtphbdZxFL\nC9wR\r\n=YN7J\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs","types":"dist/imgix-js-core.d.ts","module":"dist/index.mjs","gitHead":"4a4fe1efbfca90f49a6a7e91ecb3a22d5580507a","scripts":{"dev":"rollup -c -w","test":"mocha ./test/*.mjs","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.mjs'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha test/performance/*.mjs"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.7.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.2","sinon":"10.0.0","rollup":"2.42.3","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.2","typescript":"4.2.3","@babel/core":"7.13.10","@babel/register":"7.13.8","@babel/preset-env":"7.13.12","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.1.1_1616538959448_0.13230991490557997","host":"s3://npm-registry-packages"}},"3.1.2":{"name":"@imgix/js-core","version":"3.1.2","license":"BSD-2-Clause","_id":"@imgix/js-core@3.1.2","maintainers":[{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"0ce0157a8bb9596a3aaf3279ac03973436d182ba","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.1.2.tgz","fileCount":12,"integrity":"sha512-ZJEOVESqiRg9AIbbCDCnAt7Xuifqeo0wAYVBD2LhM8Ubxkr+Oz3UxrReizwbZc4Pv/h1EZ04Z8aF4TVS4X8Cjg==","signatures":[{"sig":"MEYCIQCWLGbRMDDT//pjzvtuQVJL7K16YS6Y80In80y7SLLoegIhALoAtSyPiwNS+srZ/YqgErBAtx6c+vtKaXO8Xpl8BuGw","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":79974,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXPpHCRA9TVsSAnZWagAAgooQAIRtDG4q3IcZQeO61uMW\n5v4OvW9Lpt1GfGibTDeXj1g7Si3d6hswGYxbVKGLzMTeW2nuhpDEl4cAGIY4\n3KSzUJOgrLc4sFajHVJ+r7f2qIuYJmgc2Wne6NuPTuI9njwU5hfmlGZ93K9D\np9PG2b3nMWktQrid5RsXCANCBr+g12LDvNTTH7lWIV+p1ZqsZzSoMVU2g76s\nrJ/CiaRFncXRLZMjb5Nq9qi5JHLsX81tI/GtZneUf4TzckEM6SSyEuBM/gn/\nzBGKO/w5n1od6/941vOK/t8e47p0PUqBcPIiNwJfLHZP4hYfmZypYcs/OXp7\nK06CxLIXl9hxK7DDXHiwcWk0M0A7coVqfLVwtfWMoNsEJu6hhlGxTdRWBhcF\n1ApUIbq88xhB3dIXmZz69yLmEuorW0bHua0QYulQu4wXHX+NeEWmxe+9o0zb\nh03LmkuYi3J/Ox4gPHruY1cVPU+m9bIsUTdvIBTfHqMBR9LpgOUjSWhEdtl+\nVHGrkhSUqitDz5PnRX3ErEb+gfvgGYnMfVrUMnRHzxQ2PVNCUSv51yLBgeRA\n9Mjv/KpWEfmMdFbvLPzwJKjpwdrMngMbCdfwRF4fP7WfkJe5CE899tBlGmGT\nrd/8haHwvZhjXyiHigh0NDMIOKDqUQMVefvh/PBYzV/N9Hh5Yr+UvLG6GUpd\nu4i5\r\n=SfYP\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/imgix-js-core.d.ts","module":"dist/index.esm.js","gitHead":"f1a54633b8e7465b6462ec4615a3c6bdcff72d62","scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.js'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"esm":"^3.2.25","md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"mocha":"8.3.2","sinon":"10.0.0","rollup":"2.42.4","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.2","typescript":"4.2.3","@babel/core":"7.13.10","@babel/register":"7.13.8","@babel/preset-env":"7.13.12","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.1.2_1616706118863_0.41892068837319885","host":"s3://npm-registry-packages"}},"3.1.3":{"name":"@imgix/js-core","version":"3.1.3","license":"BSD-2-Clause","_id":"@imgix/js-core@3.1.3","maintainers":[{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"9c26366f84f59e6c238c41455f45aacdf04862b7","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.1.3.tgz","fileCount":12,"integrity":"sha512-7HUIFy4dq9wLSJURgPhglSni50rt3af4cAyBip14koR5oPIGgTGs0W41aQZc5gyCesh7jZaSjm4VxiwqS7gszw==","signatures":[{"sig":"MEUCIE0c0j+DeDNBdWUF1inxooZ2HA6iOFIFnhMmEd7DpuwXAiEA+lQFNvnJZ5XjC4t7BLHxJ3HOMnECYmLLWSEdPpCpdo0=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":80142,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgXQJxCRA9TVsSAnZWagAAS3YP/0RnSw+Yrug6DCT9ae63\nrvTaR7ya9bIrBT9xGwXGZbxxBLD+69KorFhICkaDluA+YDuKSRr3CbflZoxa\nM6Ov42OVHJghnyuZEWyQ/Y5toNGo3gtfiiKbGe9oJeV6HJPSjhGPhKwQxQw3\nOL5F3LUfBHNTXaydQSvoexvjbJG551aWrg7sVBPfpyrD8zfeIrMhihj07PNV\nKwE3zz+3FVHx6ivqTrtR2flOfgjmgpgnH8ne6z907llvTdxV2j6QwTdPfV98\nDOOTH371rL6Ii/NoFG2c5tYaRzbQ3uvuyoml6b69rYHJfiWw+WG30GOfebfT\nwCECUWYq7bNuesBJS7TszBUZEimLvAVAAT+tAPE8zDtc2T+raOgSK1liAtr9\nz0cDba5MZxciCsw7Tm+smUCCVqdjbZL3GH78C+bxijnwNqfQ+5YfCtwgf1X9\nDxy8ueJjYlB+gUoqfDMCjtjwoHDjT7DKzik28S21BfG0NGj1V/CFkWKnrHpx\n2v1tQbijZ11OxT9dt2NF+JNH6IIz8f7moYPod9SZXoux4ZUOvoKw5y3Bx/Bh\neywcIk6Pa9lpj08GYRRHb7OAf8Dd/z9WSMzMVXdinCL6rVHzcGboZaZHQ0zA\nakM/slcAeOWDmuVKhuLyYjhCHFeXmKMAwFXbIeO4mT+2j7zpSNCxWHMh9y8G\nF32y\r\n=4L2N\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/imgix-js-core.d.ts","module":"dist/index.esm.js","gitHead":"54cde03eb07de5f659fd45f85efe7807e071c29b","scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js","build":"rollup -c","pretty":"prettier --write '{src,test}/**/*.js'","compile":"cp ./src/imgix-js-core.d.ts ./dist/imgix-js-core.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"edsz","email":"esanchez@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.6.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.16.0","dependencies":{"md5":"^2.2.1","js-base64":"~2.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"^3.2.25","mocha":"8.3.2","sinon":"10.0.0","rollup":"2.42.4","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.2","typescript":"4.2.3","@babel/core":"7.13.10","@babel/register":"7.13.8","@babel/preset-env":"7.13.12","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.1.3_1616708208927_0.3099686444227523","host":"s3://npm-registry-packages"}},"3.2.0":{"name":"@imgix/js-core","version":"3.2.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.2.0","maintainers":[{"name":"vuryanh","email":"rvu@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"a0f84f5a09ed14ea4f70a3d47e8132bcd90dc106","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.2.0.tgz","fileCount":11,"integrity":"sha512-qXDE+/uKBx8Q5jyQa0NSyTFjBYtmum/i4m0J1IT98Ve0wvENpGP+6DyyCYengqmTlXGWq2OX/cwIxej1+pQHJQ==","signatures":[{"sig":"MEUCIQDxE2dHC0NYNxE5zozegGKwClMo9LdEYTy06/1a/R/B1AIge+n4cLVglJ2AMxW+bfehnmfJpp0qD57uA+RWFsNlzaY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":80184,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg0lGCCRA9TVsSAnZWagAA4AoP/jUNkxWXy3cSk+gjEBe0\nqmUn79oood+Bh4rh5+U6au3Kvt5DpWui7OU7hPlUgqpYZZ/h7PfEVK01v7JU\nf9GmKScCFqwDM1QgPV/1if+2ASvCzOd04hKrISklP2eqnDsSzhA++Z5rZq6+\nnaid3UfBbo0jbF0lHqBal/lrGiJQKU8jtPAY0GZMiwMbN9cTpHpMtql2cOnz\n/732SPsQ1Vc2uedBERu1lbRnI+6e8CQDuzqHyzshkWDDpWefp3Ot7g6DmjKs\nTDt/2ExRan+4LotLV256lgKzKCzeO2SxtCRwPlhIEn2pHv6ZmIDm2QQQtSaN\nMcDZRuvAYaEqu3ro0pot8eqiYHx9UufbS0si5+ffE085AWVIKOkC+hHOlXYr\n585JIaKvJmQlAJhayGzOVDOW2VVziS5ZnikVs/8Wbmq2ThjntQZXpoGoZ0MN\nwiUV2yl7QOWFBLBWyjm/q3RY3RxdPysUo+882tozXwXfu8TiZEiQ7Vb3w9mS\nIwzUqH0+qqvG0LdHyPPjkm/Cg3DBKS91BuQiJDvAf+3RyG2aCEnMCQ3OtXfp\nkQVWND6FyJuo2jxRAPAaStHYWqdjtRGQo3ORbY1GXwkNto9syAGPZvnZjbLb\niO4x91K7gcz6z1toJIZ5GOv95lQ02OJwppnkhXcJwpnBB5y3TpR5w3Se6Xo2\n9jFz\r\n=NP06\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"c399a167ae4722536db866e0e25d6da75644bee7","scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"sherwinski","email":"sherwinhb@gmail.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.7.4","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.15.1","dependencies":{"md5":"^2.2.1","js-base64":"~3.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","mocha":"8.3.2","sinon":"10.0.0","rollup":"2.45.2","dtslint":"4.0.9","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.8","typescript":"4.2.4","@babel/core":"7.14.6","@babel/register":"7.14.5","@babel/preset-env":"7.14.5","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.2.0_1624396161779_0.04693506875457265","host":"s3://npm-registry-packages"}},"3.2.1":{"name":"@imgix/js-core","version":"3.2.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.2.1","maintainers":[{"name":"vuryanh","email":"rvu@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"c8e6fed8c3cede582fad511a32def249a426bd6b","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.2.1.tgz","fileCount":11,"integrity":"sha512-Evw7rDybGuOH8sU39JIZUmDue1IjV6SXqrv4f52rb9SzIow/uV+L7ch+3dCFiFTU3YXg5qodP6snIzXCj3gZvQ==","signatures":[{"sig":"MEQCIB6vHBIO9jV8RaDLgPjfhsaHmR4ujfRCOSHsjEfH5h0fAiAqavgqyV+g4P/UKDZsSBeyuXMiFEEXZH2f53UvSWgh7w==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":80368,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg2kGJCRA9TVsSAnZWagAA7NwP/3dLnzgJEJfX+Cr7prOF\ns3CtPhZdx5qDBUFJGK/fStQOY38CBQn3cXIp2pvigdjoiro0LePMyFc4MuET\nogaMGx5ZCv4oWGd4rJqfqcp1YMvWHFnJDXgmlaKh0jWMGyaiDSJVBur6kYQ5\nSdtqpJMSTdbVCHCUEX5qyRvS6WUJPAkMghneESmDT+Z49WF0T176SJ0pwIGO\nZqiZNVCmf8wuxzGPMWASHBMjgeTfF3484BujDuVbP7K80mYu50fquekUXgli\nJwyBRtslMvqdd4rQU/15F8wWP2o16OlW6jhVAQYNC/qRnlTtlFMgu9zGjZPl\nCbPGOhfZdtQRkX5GOVmiGV8n0Cdf5k5LJV8UQsR3xcsZ/NPZTUPRK2qt4NgT\n9G7zZeU4t8tpGLuoHLwEIp+iyZYJU3brq2WUwtDnO5Q8vbEixHhuv2Iplnq2\nuCe6ePKEjMKjPs13Kbs0jCEPbCtN4lsxmm/aM8LNHZ2y3b5AgoLu/1uW+VS9\nfOBPjzFmcTCRr8E9c8EraONXL9Be3BKnvGFLs30q4ILC67WFsk11d3TyWeVN\nhdEUDiZssMXpxunJvOpwcN/xBGoyXC5wFnZG9LoGsJDvVM6QdtmMVmXyGve9\nXTv6TJhFj6wF9D0bUH4eb3j5zKQ/JIvB2GzPnANdrr4qfddzp0wlzysEULd2\nN74P\r\n=w9P1\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"46b0d6348c363e54f42de6186906925cd5570f1d","scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"sherwinski","email":"sherwinhb@gmail.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.7.4","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.15.1","dependencies":{"md5":"^2.2.1","js-base64":"~3.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","mocha":"8.3.2","sinon":"10.0.0","rollup":"2.45.2","dtslint":"4.0.9","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.8","typescript":"4.2.4","@babel/core":"7.14.6","@babel/register":"7.14.5","@babel/preset-env":"7.14.7","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.2.1_1624916360789_0.6800301053780655","host":"s3://npm-registry-packages"}},"3.3.0-rc.1":{"name":"@imgix/js-core","version":"3.3.0-rc.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.3.0-rc.1","maintainers":[{"name":"vuryanh","email":"rvu@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"0c59667979bba13c69a588da49c50ac47f540222","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.3.0-rc.1.tgz","fileCount":11,"integrity":"sha512-gus5/TtPGsaxCK6WkAw+Yh1zOZV35QFqhSuUqCNEEIHlhH3kTznapJf/ScGH/IjskzK1IjvKTWFnKaMgI4L/UQ==","signatures":[{"sig":"MEQCIF3RDuinjLIt6KHnlFcVEKwuMXVgaywlxVRJQMYJMAfEAiAZ8YvESLo60UuESpN0o6At+nMKWT0i8PRIjNCVGWziLA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":92127,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg5f6qCRA9TVsSAnZWagAA/gwP/0M+WrhPkhnaMIdDB3SG\nFG9jUHDSFdMdRlju1EJUq3BGNQuRwJ9CPyaQiPH5nmBV9BHu+F/YxYVefVRS\nR8dpk0wFYdQhhkeHPtOjNg0Rpp+kkLJK+/vt2ogKrwHXuNmnl4c0LCDtAAJI\ncJ1AJUCCJ2Hnn6FbAMyTGOiRv95hhP48+9/swKM2lX+l0Btlz+T//ImOi6b0\n3lILfuWHVAHwsDkzp89XoeAhP6OljbFOTTrJcUXGXccvhj0TrsL/sBdHciiR\ntcGwwB3jd6iayyGK+x5O2ZjQGSGsHbAulAnq0STP+s9UPL5RBYc6AJLOD+Iu\nGJ/K45EsEaHb3mqoEQQZgbKG3HnUDdJpaZXoLZa1WZIpBL5rcSrR1mtQ+iIH\nrPhRzTSonzXC8W5lJxsPLxvnCKuphMfVw1nCfkUUvElcIwvmDT+AXDvL6K7G\nvPcS+E/j18/j/WOLuYvRrmG3l6rEA1Oz7e4eb6ZMebPV9fgf/WESlQP7M7RK\nU4q2URDLjXR3HsBk8zXwGzcfGEXAzy9v1rWLo+eo+/ShicP/Qaij8eHnFvq2\n9air0y5Q3SqY1D+As2hYAOQL8hP1IBcGVC6i8RFXQJdxoCDhEVsQdbk0+bZz\nmTrsvPOa0NzEZRogNNvztWlKXreuhuNjxo/L6GCht5SH0pbKyET6xT2O6hlH\n/64O\r\n=1lil\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","readme":"<!-- ix-docs-ignore -->\n\n![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)\n\n`@imgix/js-core` is a JavaScript library for generating image URLs with [imgix](https://www.imgix.com/) that can be used in browser or server-side settings.\n\n[![NPM Version](https://img.shields.io/npm/v/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Build Status](https://api.travis-ci.com/imgix/js-core.svg?branch=main)](https://travis-ci.com/github/imgix/js-core)\n[![Monthly Downloads](https://img.shields.io/npm/dm/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Minified Size](https://img.shields.io/bundlephobia/min/imgix-core-js)](https://bundlephobia.com/result?p=imgix-core-js)\n[![License](https://img.shields.io/github/license/imgix/js-core)](https://github.com/imgix/js-core/blob/main/LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_shield)\n\n---\n\n<!-- /ix-docs-ignore -->\n\n<!-- NB: Run `npx markdown-toc README.md --maxdepth 4 | sed -e 's/[[:space:]]\\{2\\}/    /g' | pbcopy` to generate TOC :) -->\n\n<!-- prettier-ignore-start -->\n\n- [Installing](#installing)\n- [Usage](#usage)\n    * [CommonJS](#commonjs)\n    * [ES6 Modules](#es6-modules)\n    * [In-browser](#in-browser)\n- [Configuration](#configuration)\n- [API](#api)\n    * [`ImgixClient.buildURL(path, params)`](#imgixclientbuildurlpath-params)\n    * [`ImgixClient.buildSrcSet(path, params, options)`](#imgixclientbuildsrcsetpath-params-options)\n        + [Fixed Image Rendering](#fixed-image-rendering)\n        + [Custom Widths](#custom-widths)\n        + [Width Tolerance](#width-tolerance)\n        + [Minimum and Maximum Width Ranges](#minimum-and-maximum-width-ranges)\n        + [Variable Qualities](#variable-qualities)\n    * [Web Proxy Sources](#web-proxy-sources)\n- [What is the `Ixlib` Param on Every Request?](#what-is-the-ixlib-param-on-every-request)\n- [Testing](#testing)\n- [License](#license)\n\n<!-- prettier-ignore-end -->\n\n## Installing\n\n@imgix/js-core can be installed via npm:\n\n```bash\nnpm install @imgix/js-core\n```\n\n## Usage\n\nDepending on your module system, using @imgix/js-core is done a few different ways. The most common entry point will be the `ImgixClient` class. Whenever you provide data to `ImgixClient`, make sure it is not already URL-encoded, as the library handles proper encoding internally.\n\n### CommonJS\n\n```js\nconst ImgixClient = require(\"@imgix/js-core\");\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', {\n  w: 400,\n  h: 300,\n});\n\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300&s=…\"\n```\n\n### ES6 Modules\n\n```js\nimport ImgixClient from \"@imgix/js-core\";\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => 'https://testing.imgix.net/users/1.png?w=400&h=300&s=…'\n```\n\n### In-browser\n\n```js\nvar client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  // Do not use signed URLs with `secureURLToken` on the client side,\n  // as this would leak your token to the world. Signed URLs should\n  // be generated on the server.\n});\n\nvar url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300\"\n```\n\n## Configuration\n\nThe following options can be used when creating an instance of `ImgixClient`:\n\n- **`domain`:** String, required. The imgix domain that will be used when constructing URLs. Defaults to `null`.\n- **`useHTTPS`:** Boolean. Specifies whether constructed URLs should use the HTTPS protocol. Defaults to `true`.\n- **`includeLibraryParam`:** Boolean. Specifies whether the constructed URLs will include an [`ixlib` parameter](#what-is-the-ixlib-param-on-every-request). Defaults to `true`.\n- **`secureURLToken`:** String. When specified, this token will be used to sign images. Read more about securing images [on the imgix Docs site](https://docs.imgix.com/setup/securing-images). Defaults to `null`.\n\n## API\n\n### `ImgixClient.buildURL(path, params)`\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n\nConstruct a single image URL by passing in the image `path` and any rendering API parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst url = client.buildURL('folder/image.jpg', {\n  w: 1000,\n});\n```\n\n**Returns**: an image URL as a string.\n\n```html\nhttps://testing.imgix.net/folder/image.jpg?w=1000&ixlib=js-...\n```\n\n### `ImgixClient.buildSrcSet(path, params, options)`\n\n<!-- prettier-ignore-start -->\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of srcset modifiers, described below:\n  - [**`widths`**](#custom-widths)\n  - [**`widthTolerance`**](#width-tolerance)\n  - [**`minWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`maxWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`disableVariableQuality`**](#variable-qualities)\n\n<!-- prettier-ignore-end -->\n\nThe @imgix/js-core module allows for generation of custom `srcset` attributes, which can be invoked through `buildSrcSet()`. By default, the `srcset` generated will allow for responsive size switching by building a list of image-width mappings.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg');\n\nconsole.log(srcset);\n```\n\n**Returns**: A `srcset` attribute value as a string.\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&s=e2e581a39c917bdee50b2f8689c30893 100w,\nhttps://testing.imgix.net/image.jpg?w=116&s=836e0bc15da2ad74af8130d93a0ebda6 116w,\nhttps://testing.imgix.net/image.jpg?w=134&s=688416d933381acda1f57068709aab79 134w,\n                                            ...\nhttps://testing.imgix.net/image.jpg?w=7400&s=91779d82a0e1ac16db04c522fa4017e5 7400w,\nhttps://testing.imgix.net/image.jpg?w=8192&s=59eb881b618fed314fe30cf9e3ec7b00 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Fixed Image Rendering\n\nSpecifying either a `w` or a `h` parameter to `buildSrcSet()` will create a DPR-based srcset. This DPR-based srcset allows for the fixed-sized image to be served at different resolutions (i.e. at different pixel densities).\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {\n  h: 800,\n  ar: '3:2',\n  fit: 'crop',\n});\n\nconsole.log(srcset);\n```\n\nWill produce the following attribute value:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74 1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82 2x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=3&s=8b93ab83d3f1ede4887e6826112d60d1 3x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=4&s=df7b67aa0439588edbfc1c249b3965d6 4x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=5&s=7c4b8adb733db37d00240da4ca65d410 5x\n```\n\n<!-- prettier-ignore-end -->\n\nFor more information to better understand `srcset`, we highly recommend [Eric Portis' \"Srcset and sizes\" article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.\n\n#### Custom Widths\n\nIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { widths: [100, 500, 1000, 1800] }\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following `srcset` of width pairs:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=1000 1000w,\nhttps://testing.imgix.net/image.jpg?w=1800 1800w\n```\n\n**Note:** that in situations where a `srcset` is being rendered as a [fixed image](#fixed-image-rendering), any custom `widths` passed in will be ignored. Additionally, if both `widths` and a `widthTolerance` are passed to the `buildSrcSet` method, the custom widths list will take precedence.\n\n#### Width Tolerance\n\nThe `srcset` width tolerance dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.\n\nBy default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as `widthTolerance` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {}, { widthTolerance: 0.2 });\n\nconsole.log(srcset);\n```\n\nIn this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=140 140w,\nhttps://testing.imgix.net/image.jpg?w=196 196w,\n          ...\nhttps://testing.imgix.net/image.jpg?w=8192 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Minimum and Maximum Width Ranges\n\nIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `buildSrcSet()` method. To do this, you can pass in an options object as a third argument, providing positive integers as `minWidth` and/or `maxWidth` attributes:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { minWidth: 500, maxWidth: 2000 }\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller, more tailored srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=580 580w,\nhttps://testing.imgix.net/image.jpg?w=672 672w,\nhttps://testing.imgix.net/image.jpg?w=780 780w,\nhttps://testing.imgix.net/image.jpg?w=906 906w,\nhttps://testing.imgix.net/image.jpg?w=1050 1050w,\nhttps://testing.imgix.net/image.jpg?w=1218 1218w,\nhttps://testing.imgix.net/image.jpg?w=1414 1414w,\nhttps://testing.imgix.net/image.jpg?w=1640 1640w,\nhttps://testing.imgix.net/image.jpg?w=1902 1902w,\nhttps://testing.imgix.net/image.jpg?w=2000 2000w\n```\n\nRemember that browsers will apply a device pixel ratio as a multiplier when selecting which image to download from a `srcset`. For example, even if you know your image will render no larger than 1000px, specifying `options: { max_srcset: 1000 }` will give your users with DPR higher than 1 no choice but to download and render a low-resolution version of the image. Therefore, it is vital to factor in any potential differences when choosing a minimum or maximum range.\n\n**Note:** that according to the [imgix API](https://docs.imgix.com/apis/url/size/w), the maximum renderable image width is 8192 pixels.\n\n#### Variable Qualities\n\nThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-image](https://github.com/imgix/js-core#fixed-image-rendering) srcset. This technique is commonly used to compensate for the increased filesize of high-DPR images. Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall filesize without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).\n\nThis behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `{ disableVariableQuality: true }` to the third argument of `buildSrcSet()`.\n\nThis behavior specifically occurs when a [fixed-size image](https://github.com/imgix/js-core#fixed-image-rendering) is rendered, for example:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', { w: 100 });\n```\n\nwill generate a srcset with the following `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=75 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=50 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=35 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=23 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=20 5x\n```\n\n### Web Proxy Sources\n\nIf you are using a [Web Proxy Source](https://docs.imgix.com/setup/creating-sources/web-proxy), all you need to do is pass the full image URL you would like to proxy to `@imgix/js-core` as the path, and include a `secureURLToken` when creating the client. `@imgix/js-core` will then encode this full URL into a format that imgix will understand, thus creating a proxy URL for you.\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'my-proxy-domain.imgix.net',\n  secureURLToken: '<token>',\n});\n\nclient.buildURL('https://example.com/image-to-proxy.jpg', {});\nclient.buildSrcSet('https://example.com/image-to-proxy.jpg', {});\n```\n\n## What is the `Ixlib` Param on Every Request?\n\nFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.\n\nThis can be disabled by passing a falsy value for the `includeLibraryParam` option to `new ImgixClient`:\n\n```js\nnew ImgixClient({\n  domain: 'my-source.imgix.net',\n  includeLibraryParam: false,\n});\n```\n\n## Testing\n\n@imgix/js-core uses mocha for testing. Here’s how to run those tests:\n\n```bash\nnpm test\n```\n\n\n## License\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_large)\n","gitHead":"6e35c1277e67c1863c608003afe912f8d413015e","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"@next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"sematic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.19.1","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"16.4.2","dependencies":{"md5":"^2.2.1","ufo":"^0.7.5","js-base64":"~3.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"esm":"3.2.25","mocha":"8.3.2","sinon":"10.0.0","rollup":"2.45.2","dtslint":"4.0.9","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.10","typescript":"4.2.4","@babel/core":"7.14.6","@babel/register":"7.14.5","@babel/preset-env":"7.14.7","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"^9.0.0","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"^5.0.1","@google/semantic-release-replace-plugin":"^1.0.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.3.0-rc.1_1625685674124_0.7202864402648019","host":"s3://npm-registry-packages"}},"3.3.0":{"name":"@imgix/js-core","version":"3.3.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.3.0","maintainers":[{"name":"vuryanh","email":"rvu@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"a81348de76a6dcd70333757566f2c3b701a0e719","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.3.0.tgz","fileCount":11,"integrity":"sha512-tQQDOho//WqxoGRgG2QvkMPxKLS1Lm0LDydpPsRvPjUeBCXJju+2zfG4BHeXbgxmxc46pCgeoqhP5U7h3HAy+w==","signatures":[{"sig":"MEUCIQC1jyNERMR9d/ADjFOIpF4lA48uHYwQ0WDPjZchWwfhaQIgWhC+r0ENNqniVAaJaGdZwA6tceU1nxfdd47dPtQFQsQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":92047,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg50r0CRA9TVsSAnZWagAADV8P/A4NHTwOOqeqS4RMr+mR\nEixcBiSC03/w5Fi6YiuBxVKdAVn/fyo6X1tAqs43OHz3D4Nb/Ebmm8cDqkwZ\nSGdKPXQmwG6/haXa+Uw7aBNDHTnxeDvr7Ua4DgpUWYRroIea7nxryg2mr5Ch\nkOSG+yw5ixA2+G57sZYNot3XQ5NOn+pG4TnTXvVWCgUGBDvDbMjxJR0zTfBG\n/4SedJcIkn82coFrYU7Wn1co6RyR+QtQ/eLgD2wFaEgtBOkiJ3Tc2VkcwhD2\nVOZSZGscICa+/uSgWgitZroteg38ujwWqONeUIxT05hKTh03bIPObZmxrf+z\nkMECIKhLMPrZt6oRl/fmjYrDkDlbLRzK9miVY74nG2UsPR3/jLFvtQIeynFF\n36J1pBmF1b+L+uul4BS7tZmddeMqPeVMBRSnBgjsEFscX8dKXFqNcpfuJ4L3\ncMNgT2ZYti/C5Wdcc8zSBknXjJYnQdJ0bIk37LGlOUVHOHPC4FRbCtvYzWsB\ntcD/NL3E8nDEU8C7dPvwnec2Eoopr2yb58Rsm1LN6Q/Pqg5vkMyn5+F22n+2\nRvEiE5jyMQJbJ/IV85316nAy55NMyfn0lvvQU0PAdybReCkaZ4qbU2kC1AIa\nnhnLWndYItMYP+Vr5ZjKTJ2/utTTLYF1vS2CsudkKcv/x3P5/2PICviO0S5v\noQKF\r\n=gb1P\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","readme":"<!-- ix-docs-ignore -->\n\n![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)\n\n`@imgix/js-core` is a JavaScript library for generating image URLs with [imgix](https://www.imgix.com/) that can be used in browser or server-side settings.\n\n[![NPM Version](https://img.shields.io/npm/v/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Build Status](https://api.travis-ci.com/imgix/js-core.svg?branch=main)](https://travis-ci.com/github/imgix/js-core)\n[![Monthly Downloads](https://img.shields.io/npm/dm/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Minified Size](https://img.shields.io/bundlephobia/min/imgix-core-js)](https://bundlephobia.com/result?p=imgix-core-js)\n[![License](https://img.shields.io/github/license/imgix/js-core)](https://github.com/imgix/js-core/blob/main/LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_shield)\n\n---\n\n<!-- /ix-docs-ignore -->\n\n<!-- NB: Run `npx markdown-toc README.md --maxdepth 4 | sed -e 's/[[:space:]]\\{2\\}/    /g' | pbcopy` to generate TOC :) -->\n\n<!-- prettier-ignore-start -->\n\n- [Installing](#installing)\n- [Usage](#usage)\n    * [CommonJS](#commonjs)\n    * [ES6 Modules](#es6-modules)\n    * [In-browser](#in-browser)\n- [Configuration](#configuration)\n- [API](#api)\n    * [`ImgixClient.buildURL(path, params)`](#imgixclientbuildurlpath-params)\n    * [`ImgixClient.buildSrcSet(path, params, options)`](#imgixclientbuildsrcsetpath-params-options)\n        + [Fixed Image Rendering](#fixed-image-rendering)\n        + [Custom Widths](#custom-widths)\n        + [Width Tolerance](#width-tolerance)\n        + [Minimum and Maximum Width Ranges](#minimum-and-maximum-width-ranges)\n        + [Variable Qualities](#variable-qualities)\n    * [Web Proxy Sources](#web-proxy-sources)\n- [What is the `Ixlib` Param on Every Request?](#what-is-the-ixlib-param-on-every-request)\n- [Testing](#testing)\n- [License](#license)\n\n<!-- prettier-ignore-end -->\n\n## Installing\n\n@imgix/js-core can be installed via npm:\n\n```bash\nnpm install @imgix/js-core\n```\n\n## Usage\n\nDepending on your module system, using @imgix/js-core is done a few different ways. The most common entry point will be the `ImgixClient` class. Whenever you provide data to `ImgixClient`, make sure it is not already URL-encoded, as the library handles proper encoding internally.\n\n### CommonJS\n\n```js\nconst ImgixClient = require(\"@imgix/js-core\");\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', {\n  w: 400,\n  h: 300,\n});\n\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300&s=…\"\n```\n\n### ES6 Modules\n\n```js\nimport ImgixClient from \"@imgix/js-core\";\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => 'https://testing.imgix.net/users/1.png?w=400&h=300&s=…'\n```\n\n### In-browser\n\n```js\nvar client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  // Do not use signed URLs with `secureURLToken` on the client side,\n  // as this would leak your token to the world. Signed URLs should\n  // be generated on the server.\n});\n\nvar url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300\"\n```\n\n## Configuration\n\nThe following options can be used when creating an instance of `ImgixClient`:\n\n- **`domain`:** String, required. The imgix domain that will be used when constructing URLs. Defaults to `null`.\n- **`useHTTPS`:** Boolean. Specifies whether constructed URLs should use the HTTPS protocol. Defaults to `true`.\n- **`includeLibraryParam`:** Boolean. Specifies whether the constructed URLs will include an [`ixlib` parameter](#what-is-the-ixlib-param-on-every-request). Defaults to `true`.\n- **`secureURLToken`:** String. When specified, this token will be used to sign images. Read more about securing images [on the imgix Docs site](https://docs.imgix.com/setup/securing-images). Defaults to `null`.\n\n## API\n\n### `ImgixClient.buildURL(path, params)`\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n\nConstruct a single image URL by passing in the image `path` and any rendering API parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst url = client.buildURL('folder/image.jpg', {\n  w: 1000,\n});\n```\n\n**Returns**: an image URL as a string.\n\n```html\nhttps://testing.imgix.net/folder/image.jpg?w=1000&ixlib=js-...\n```\n\n### `ImgixClient.buildSrcSet(path, params, options)`\n\n<!-- prettier-ignore-start -->\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of srcset modifiers, described below:\n  - [**`widths`**](#custom-widths)\n  - [**`widthTolerance`**](#width-tolerance)\n  - [**`minWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`maxWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`disableVariableQuality`**](#variable-qualities)\n\n<!-- prettier-ignore-end -->\n\nThe @imgix/js-core module allows for generation of custom `srcset` attributes, which can be invoked through `buildSrcSet()`. By default, the `srcset` generated will allow for responsive size switching by building a list of image-width mappings.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg');\n\nconsole.log(srcset);\n```\n\n**Returns**: A `srcset` attribute value as a string.\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&s=e2e581a39c917bdee50b2f8689c30893 100w,\nhttps://testing.imgix.net/image.jpg?w=116&s=836e0bc15da2ad74af8130d93a0ebda6 116w,\nhttps://testing.imgix.net/image.jpg?w=134&s=688416d933381acda1f57068709aab79 134w,\n                                            ...\nhttps://testing.imgix.net/image.jpg?w=7400&s=91779d82a0e1ac16db04c522fa4017e5 7400w,\nhttps://testing.imgix.net/image.jpg?w=8192&s=59eb881b618fed314fe30cf9e3ec7b00 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Fixed Image Rendering\n\nSpecifying either a `w` or a `h` parameter to `buildSrcSet()` will create a DPR-based srcset. This DPR-based srcset allows for the fixed-sized image to be served at different resolutions (i.e. at different pixel densities).\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {\n  h: 800,\n  ar: '3:2',\n  fit: 'crop',\n});\n\nconsole.log(srcset);\n```\n\nWill produce the following attribute value:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74 1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82 2x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=3&s=8b93ab83d3f1ede4887e6826112d60d1 3x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=4&s=df7b67aa0439588edbfc1c249b3965d6 4x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=5&s=7c4b8adb733db37d00240da4ca65d410 5x\n```\n\n<!-- prettier-ignore-end -->\n\nFor more information to better understand `srcset`, we highly recommend [Eric Portis' \"Srcset and sizes\" article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.\n\n#### Custom Widths\n\nIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { widths: [100, 500, 1000, 1800] }\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following `srcset` of width pairs:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=1000 1000w,\nhttps://testing.imgix.net/image.jpg?w=1800 1800w\n```\n\n**Note:** that in situations where a `srcset` is being rendered as a [fixed image](#fixed-image-rendering), any custom `widths` passed in will be ignored. Additionally, if both `widths` and a `widthTolerance` are passed to the `buildSrcSet` method, the custom widths list will take precedence.\n\n#### Width Tolerance\n\nThe `srcset` width tolerance dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.\n\nBy default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as `widthTolerance` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {}, { widthTolerance: 0.2 });\n\nconsole.log(srcset);\n```\n\nIn this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=140 140w,\nhttps://testing.imgix.net/image.jpg?w=196 196w,\n          ...\nhttps://testing.imgix.net/image.jpg?w=8192 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Minimum and Maximum Width Ranges\n\nIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `buildSrcSet()` method. To do this, you can pass in an options object as a third argument, providing positive integers as `minWidth` and/or `maxWidth` attributes:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { minWidth: 500, maxWidth: 2000 }\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller, more tailored srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=580 580w,\nhttps://testing.imgix.net/image.jpg?w=672 672w,\nhttps://testing.imgix.net/image.jpg?w=780 780w,\nhttps://testing.imgix.net/image.jpg?w=906 906w,\nhttps://testing.imgix.net/image.jpg?w=1050 1050w,\nhttps://testing.imgix.net/image.jpg?w=1218 1218w,\nhttps://testing.imgix.net/image.jpg?w=1414 1414w,\nhttps://testing.imgix.net/image.jpg?w=1640 1640w,\nhttps://testing.imgix.net/image.jpg?w=1902 1902w,\nhttps://testing.imgix.net/image.jpg?w=2000 2000w\n```\n\nRemember that browsers will apply a device pixel ratio as a multiplier when selecting which image to download from a `srcset`. For example, even if you know your image will render no larger than 1000px, specifying `options: { max_srcset: 1000 }` will give your users with DPR higher than 1 no choice but to download and render a low-resolution version of the image. Therefore, it is vital to factor in any potential differences when choosing a minimum or maximum range.\n\n**Note:** that according to the [imgix API](https://docs.imgix.com/apis/url/size/w), the maximum renderable image width is 8192 pixels.\n\n#### Variable Qualities\n\nThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-image](https://github.com/imgix/js-core#fixed-image-rendering) srcset. This technique is commonly used to compensate for the increased filesize of high-DPR images. Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall filesize without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).\n\nThis behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `{ disableVariableQuality: true }` to the third argument of `buildSrcSet()`.\n\nThis behavior specifically occurs when a [fixed-size image](https://github.com/imgix/js-core#fixed-image-rendering) is rendered, for example:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', { w: 100 });\n```\n\nwill generate a srcset with the following `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=75 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=50 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=35 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=23 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=20 5x\n```\n\n### Web Proxy Sources\n\nIf you are using a [Web Proxy Source](https://docs.imgix.com/setup/creating-sources/web-proxy), all you need to do is pass the full image URL you would like to proxy to `@imgix/js-core` as the path, and include a `secureURLToken` when creating the client. `@imgix/js-core` will then encode this full URL into a format that imgix will understand, thus creating a proxy URL for you.\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'my-proxy-domain.imgix.net',\n  secureURLToken: '<token>',\n});\n\nclient.buildURL('https://example.com/image-to-proxy.jpg', {});\nclient.buildSrcSet('https://example.com/image-to-proxy.jpg', {});\n```\n\n## What is the `Ixlib` Param on Every Request?\n\nFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.\n\nThis can be disabled by passing a falsy value for the `includeLibraryParam` option to `new ImgixClient`:\n\n```js\nnew ImgixClient({\n  domain: 'my-source.imgix.net',\n  includeLibraryParam: false,\n});\n```\n\n## Testing\n\n@imgix/js-core uses mocha for testing. Here’s how to run those tests:\n\n```bash\nnpm test\n```\n\n\n## License\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_large)\n","gitHead":"1ca52f95d27f37a57985dc15bfc54cb182121d48","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main","next",{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"sematic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.19.1","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"16.4.2","dependencies":{"md5":"^2.2.1","ufo":"^0.7.5","js-base64":"~3.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"esm":"3.2.25","mocha":"8.3.2","sinon":"10.0.0","rollup":"2.45.2","dtslint":"4.0.9","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.10","typescript":"4.2.4","@babel/core":"7.14.6","@babel/register":"7.14.5","@babel/preset-env":"7.14.7","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"^9.0.0","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"^5.0.1","@google/semantic-release-replace-plugin":"^1.0.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.3.0_1625770739780_0.2518161813078843","host":"s3://npm-registry-packages"}},"3.3.1-rc.1":{"name":"@imgix/js-core","version":"3.3.1-rc.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.3.1-rc.1","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"dc93a804d0b319886eff7fcaf362cde9872154f1","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.3.1-rc.1.tgz","fileCount":11,"integrity":"sha512-Kcc1QWgXLw4xG2i3ejWbzOM2V02W0x8Zm8D5TNSOaW0Ul7tE30BIpA4PPCLEYNzZs+SZTiZqvQ3QmaeHLRG/ZA==","signatures":[{"sig":"MEUCIQCx74mYNyQ3OFZicK7TgNjhgPfXdax4+FetUPhy+qrfdQIgNUqe+8BhrR26gsFT1SA2J0VR2A83DhtS0BySOwHIoRc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":92173,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJg+bDpCRA9TVsSAnZWagAAQsEP/RsLKTFqOAxRMl2LYBNE\n0ArK13z+2h8od+TvhmeJxBQITO1nL+SxCKmmRtpd6NRF5gDyz/r2gcXi3ubD\nkS8RyW2/7H0hlXpieDFMY9z2amY3jQwcZkw2A0Lv7wrEo0Z7F7XKO0yV7dMd\nNY90eC1BGKsL06G46VK1OROZ7NBhWIjwDACON+AFugkKatuxb2a8fP3iIWGh\noL4AhQMPHaWY+Ie6T5cKTcrNMTBzIlQyr6Rkf9pBOpMxYD03rVrpBoKks2WL\nevs2pYs2R1XcNX4yLskB79mNyebWFJyM90Io0QskoV7xeW/SPXHYGksfDe/j\nnbMrn14tnrINoPPV1lf6ALnoBE+p5oWNWTv24wAU1uqv0TkRnqOQfHDoWEsJ\nBv8heVwLRerHKSiI2mYeSGphfxI5wFeDs/NzhSkLGbPoAAx032DkS02Keio3\n8g4M4dpYxjrlL25sODLITL4J2FNa1RdNTWWOB9q4N+HZVFivz6wAuwbPi7R4\naeNeu12q9PbwtTkH+Kf6AUkIdlNwi9cLFTnvhibHWENMlOT4Dqe47XFsQvJO\nN81UyxpQxbs28Y6e71m/zBcfkTMtqjJgM7+V5PiflqIiwH4rO3IloCy2yJBS\nozZegBXpJex3tUy/WkJGrCISdXenCfuGvwW1ww4vu6Q3cjMzVFE7mUmvy4GJ\nZIP9\r\n=ccQZ\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","readme":"<!-- ix-docs-ignore -->\n\n![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)\n\n`@imgix/js-core` is a JavaScript library for generating image URLs with [imgix](https://www.imgix.com/) that can be used in browser or server-side settings.\n\n[![NPM Version](https://img.shields.io/npm/v/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Build Status](https://api.travis-ci.com/imgix/js-core.svg?branch=main)](https://travis-ci.com/github/imgix/js-core)\n[![Monthly Downloads](https://img.shields.io/npm/dm/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Minified Size](https://img.shields.io/bundlephobia/min/imgix-core-js)](https://bundlephobia.com/result?p=imgix-core-js)\n[![License](https://img.shields.io/github/license/imgix/js-core)](https://github.com/imgix/js-core/blob/main/LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_shield)\n\n---\n\n<!-- /ix-docs-ignore -->\n\n<!-- NB: Run `npx markdown-toc README.md --maxdepth 4 | sed -e 's/[[:space:]]\\{2\\}/    /g' | pbcopy` to generate TOC :) -->\n\n<!-- prettier-ignore-start -->\n\n- [Installing](#installing)\n- [Usage](#usage)\n    * [CommonJS](#commonjs)\n    * [ES6 Modules](#es6-modules)\n    * [In-browser](#in-browser)\n- [Configuration](#configuration)\n- [API](#api)\n    * [`ImgixClient.buildURL(path, params)`](#imgixclientbuildurlpath-params)\n    * [`ImgixClient.buildSrcSet(path, params, options)`](#imgixclientbuildsrcsetpath-params-options)\n        + [Fixed Image Rendering](#fixed-image-rendering)\n        + [Custom Widths](#custom-widths)\n        + [Width Tolerance](#width-tolerance)\n        + [Minimum and Maximum Width Ranges](#minimum-and-maximum-width-ranges)\n        + [Variable Qualities](#variable-qualities)\n    * [Web Proxy Sources](#web-proxy-sources)\n- [What is the `Ixlib` Param on Every Request?](#what-is-the-ixlib-param-on-every-request)\n- [Testing](#testing)\n- [License](#license)\n\n<!-- prettier-ignore-end -->\n\n## Installing\n\n@imgix/js-core can be installed via npm:\n\n```bash\nnpm install @imgix/js-core\n```\n\n## Usage\n\nDepending on your module system, using @imgix/js-core is done a few different ways. The most common entry point will be the `ImgixClient` class. Whenever you provide data to `ImgixClient`, make sure it is not already URL-encoded, as the library handles proper encoding internally.\n\n### CommonJS\n\n```js\nconst ImgixClient = require(\"@imgix/js-core\");\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', {\n  w: 400,\n  h: 300,\n});\n\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300&s=…\"\n```\n\n### ES6 Modules\n\n```js\nimport ImgixClient from \"@imgix/js-core\";\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => 'https://testing.imgix.net/users/1.png?w=400&h=300&s=…'\n```\n\n### In-browser\n\n```js\nvar client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  // Do not use signed URLs with `secureURLToken` on the client side,\n  // as this would leak your token to the world. Signed URLs should\n  // be generated on the server.\n});\n\nvar url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300\"\n```\n\n## Configuration\n\nThe following options can be used when creating an instance of `ImgixClient`:\n\n- **`domain`:** String, required. The imgix domain that will be used when constructing URLs. Defaults to `null`.\n- **`useHTTPS`:** Boolean. Specifies whether constructed URLs should use the HTTPS protocol. Defaults to `true`.\n- **`includeLibraryParam`:** Boolean. Specifies whether the constructed URLs will include an [`ixlib` parameter](#what-is-the-ixlib-param-on-every-request). Defaults to `true`.\n- **`secureURLToken`:** String. When specified, this token will be used to sign images. Read more about securing images [on the imgix Docs site](https://docs.imgix.com/setup/securing-images). Defaults to `null`.\n\n## API\n\n### `ImgixClient.buildURL(path, params)`\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n\nConstruct a single image URL by passing in the image `path` and any rendering API parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst url = client.buildURL('folder/image.jpg', {\n  w: 1000,\n});\n```\n\n**Returns**: an image URL as a string.\n\n```html\nhttps://testing.imgix.net/folder/image.jpg?w=1000&ixlib=js-...\n```\n\n### `ImgixClient.buildSrcSet(path, params, options)`\n\n<!-- prettier-ignore-start -->\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of srcset modifiers, described below:\n  - [**`widths`**](#custom-widths)\n  - [**`widthTolerance`**](#width-tolerance)\n  - [**`minWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`maxWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`disableVariableQuality`**](#variable-qualities)\n\n<!-- prettier-ignore-end -->\n\nThe @imgix/js-core module allows for generation of custom `srcset` attributes, which can be invoked through `buildSrcSet()`. By default, the `srcset` generated will allow for responsive size switching by building a list of image-width mappings.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg');\n\nconsole.log(srcset);\n```\n\n**Returns**: A `srcset` attribute value as a string.\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&s=e2e581a39c917bdee50b2f8689c30893 100w,\nhttps://testing.imgix.net/image.jpg?w=116&s=836e0bc15da2ad74af8130d93a0ebda6 116w,\nhttps://testing.imgix.net/image.jpg?w=134&s=688416d933381acda1f57068709aab79 134w,\n                                            ...\nhttps://testing.imgix.net/image.jpg?w=7400&s=91779d82a0e1ac16db04c522fa4017e5 7400w,\nhttps://testing.imgix.net/image.jpg?w=8192&s=59eb881b618fed314fe30cf9e3ec7b00 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Fixed Image Rendering\n\nSpecifying either a `w` or a `h` parameter to `buildSrcSet()` will create a DPR-based srcset. This DPR-based srcset allows for the fixed-sized image to be served at different resolutions (i.e. at different pixel densities).\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {\n  h: 800,\n  ar: '3:2',\n  fit: 'crop',\n});\n\nconsole.log(srcset);\n```\n\nWill produce the following attribute value:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74 1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82 2x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=3&s=8b93ab83d3f1ede4887e6826112d60d1 3x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=4&s=df7b67aa0439588edbfc1c249b3965d6 4x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=5&s=7c4b8adb733db37d00240da4ca65d410 5x\n```\n\n<!-- prettier-ignore-end -->\n\nFor more information to better understand `srcset`, we highly recommend [Eric Portis' \"Srcset and sizes\" article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.\n\n#### Custom Widths\n\nIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { widths: [100, 500, 1000, 1800] }\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following `srcset` of width pairs:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=1000 1000w,\nhttps://testing.imgix.net/image.jpg?w=1800 1800w\n```\n\n**Note:** that in situations where a `srcset` is being rendered as a [fixed image](#fixed-image-rendering), any custom `widths` passed in will be ignored. Additionally, if both `widths` and a `widthTolerance` are passed to the `buildSrcSet` method, the custom widths list will take precedence.\n\n#### Width Tolerance\n\nThe `srcset` width tolerance dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.\n\nBy default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as `widthTolerance` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {}, { widthTolerance: 0.2 });\n\nconsole.log(srcset);\n```\n\nIn this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=140 140w,\nhttps://testing.imgix.net/image.jpg?w=196 196w,\n          ...\nhttps://testing.imgix.net/image.jpg?w=8192 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Minimum and Maximum Width Ranges\n\nIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `buildSrcSet()` method. To do this, you can pass in an options object as a third argument, providing positive integers as `minWidth` and/or `maxWidth` attributes:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { minWidth: 500, maxWidth: 2000 }\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller, more tailored srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=580 580w,\nhttps://testing.imgix.net/image.jpg?w=672 672w,\nhttps://testing.imgix.net/image.jpg?w=780 780w,\nhttps://testing.imgix.net/image.jpg?w=906 906w,\nhttps://testing.imgix.net/image.jpg?w=1050 1050w,\nhttps://testing.imgix.net/image.jpg?w=1218 1218w,\nhttps://testing.imgix.net/image.jpg?w=1414 1414w,\nhttps://testing.imgix.net/image.jpg?w=1640 1640w,\nhttps://testing.imgix.net/image.jpg?w=1902 1902w,\nhttps://testing.imgix.net/image.jpg?w=2000 2000w\n```\n\nRemember that browsers will apply a device pixel ratio as a multiplier when selecting which image to download from a `srcset`. For example, even if you know your image will render no larger than 1000px, specifying `options: { max_srcset: 1000 }` will give your users with DPR higher than 1 no choice but to download and render a low-resolution version of the image. Therefore, it is vital to factor in any potential differences when choosing a minimum or maximum range.\n\n**Note:** that according to the [imgix API](https://docs.imgix.com/apis/url/size/w), the maximum renderable image width is 8192 pixels.\n\n#### Variable Qualities\n\nThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-image](https://github.com/imgix/js-core#fixed-image-rendering) srcset. This technique is commonly used to compensate for the increased filesize of high-DPR images. Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall filesize without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).\n\nThis behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `{ disableVariableQuality: true }` to the third argument of `buildSrcSet()`.\n\nThis behavior specifically occurs when a [fixed-size image](https://github.com/imgix/js-core#fixed-image-rendering) is rendered, for example:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', { w: 100 });\n```\n\nwill generate a srcset with the following `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=75 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=50 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=35 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=23 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=20 5x\n```\n\n### Web Proxy Sources\n\nIf you are using a [Web Proxy Source](https://docs.imgix.com/setup/creating-sources/web-proxy), all you need to do is pass the full image URL you would like to proxy to `@imgix/js-core` as the path, and include a `secureURLToken` when creating the client. `@imgix/js-core` will then encode this full URL into a format that imgix will understand, thus creating a proxy URL for you.\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'my-proxy-domain.imgix.net',\n  secureURLToken: '<token>',\n});\n\nclient.buildURL('https://example.com/image-to-proxy.jpg', {});\nclient.buildSrcSet('https://example.com/image-to-proxy.jpg', {});\n```\n\n## What is the `Ixlib` Param on Every Request?\n\nFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.\n\nThis can be disabled by passing a falsy value for the `includeLibraryParam` option to `new ImgixClient`:\n\n```js\nnew ImgixClient({\n  domain: 'my-source.imgix.net',\n  includeLibraryParam: false,\n});\n```\n\n## Testing\n\n@imgix/js-core uses mocha for testing. Here’s how to run those tests:\n\n```bash\nnpm test\n```\n\n\n## License\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_large)\n","gitHead":"f29e6f9b719079dd94cce9f6ef8e15bdef4543ec","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"sematic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.19.1","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"14.17.3","dependencies":{"md5":"^2.2.1","ufo":"^0.7.5","js-base64":"~3.6.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"esm":"3.2.25","mocha":"8.3.2","sinon":"10.0.0","rollup":"2.45.2","dtslint":"4.0.9","prettier":"2.2.1","benchmark":"2.1.4","uglify-js":"3.13.10","typescript":"4.2.4","@babel/core":"7.14.6","@babel/register":"7.14.5","@babel/preset-env":"7.14.7","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"^9.0.0","rollup-plugin-commonjs":"10.1.0","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"^5.0.1","@google/semantic-release-replace-plugin":"^1.0.0"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.3.1-rc.1_1626976489409_0.8958621925702592","host":"s3://npm-registry-packages"}},"3.2.2":{"name":"@imgix/js-core","version":"3.2.2","license":"BSD-2-Clause","_id":"@imgix/js-core@3.2.2","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"96484efe6c7176bb3ca2d4be48384ce022fcfba0","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.2.2.tgz","fileCount":10,"integrity":"sha512-FtgDn0IRCS+qchQJCpYdTWi2ijRbYci/8QihFSbDE1sAuf6/udrq8meyhrextkhcTxSy3fIFEBpLPHYItXChYg==","signatures":[{"sig":"MEYCIQCvRqDTc8A3B5W99Wd+xysNEL0a7ifXFo8DGsDP9t/W5AIhAKZ47uzjXoFt1FGXaDKwirdS5ohFZPsg6ZjTXUAjAwF7","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":76149,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhr0QeCRA9TVsSAnZWagAA0eoP/AyjbAnjVqj9rfqtm0FU\nUxOTeO2x5o710fxA4mu7jTAXMIC/yCecWW431L7ksxYLpx2TI6FUGG0cf83v\n7WyBX00E4lgEraS/3RcHNcQx/7cw8HEk+B5UHqL8HiXgAFLhpEgvBpTlTCGB\n87OS6lpLB0PQOJyuY2THwCI8yk3JGf1avCgDxv4UKxOD2n92lUIiSz7MGN+t\ndAuiFJFn9BJoEMg+C7TnO4UsM8O6Z9WoOepDNHc9IJhQfx3yuBFRcJhKmDz1\nCgARvP8bX8YN1X4MFGi9cVi254lGAkX5mtjG0HgCRAWlQGcfIEHSWl57gJcL\nc0HDW+a0jZgDoUBQQS3mlXMox1BHMajV4bWR9KUT9hzDINoljOSOU22jYA8U\nyPP7gtI2oLPqM+MswSVHWUyL8IlsT8PYQYh66zQ0LYXila0W7NyEioTZPD6J\nJ7Ebf/TNJZaYB9Y6Z4FoSzxqbaC3bW8dBZ7dvNaR5emV0Uh/ZIB/amZQqfrv\n4x/d51lNGDbEFueg7KtgIS9VtV6pLTiiAi2qtDdz8ix4fL475v9r1pb9mRs6\nkgdg0QYfOgCgiSyt7LpBCmX0+SyH1as23JMfy3IhQzAO0MqTTVtnAhSAIb21\nUfoyKUs6zmTgTmDCQriIDv0akQToiNdI+PzrMoAXKRsvkexfBNC/wbXW+vUE\nInMw\r\n=/Y7Q\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"5e6b3b624c3643fadc6680141daee319c593b2d7","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"16.13.1","dependencies":{"md5":"^2.2.1","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","mocha":"8.4.0","sinon":"12.0.1","rollup":"2.56.3","dtslint":"4.2.1","prettier":"2.4.1","benchmark":"2.1.4","uglify-js":"3.14.4","typescript":"4.4.4","@babel/core":"7.16.0","@babel/register":"7.16.0","@babel/preset-env":"7.16.4","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.2.2_1638876189982_0.2888061092171468","host":"s3://npm-registry-packages"}},"3.4.0":{"name":"@imgix/js-core","version":"3.4.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.4.0","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"dist":{"shasum":"0236247dc0920d8b520ba7be8b358ef021d8365d","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.4.0.tgz","fileCount":10,"integrity":"sha512-cCOsmpfzG0VOlR+CHD3+1w4KjE8c0JRvQTBdqfDgKKNMY8YVOmFR+jNwkoHybHYEVg6t0/SHMAbgWYC9qD/Zmg==","signatures":[{"sig":"MEYCIQDCqu8oX+JcXp6ScaSMGQ4hJAZ7lQR1kq8McaDH+pr8EgIhALfHjNYk5gv32E5QtB5bvuEj7r3j/TjZnGmQAy47Ux+J","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":83012,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJhu1w6CRA9TVsSAnZWagAAYPwQAId8sI1pbKXvNi+aqpW7\nkzDdwN/USulgJm13z9CpXX+kDxrpkbReA2oiKqNoTAFAieLOPgA+kRjU5J5a\nCIOVrOtCT8dAovpaSC2ybFIehzRs6x8Xo9onTbqjMG3qXqFKBXIriGlxJU12\nzhcZ/3HKOS0YJNqcHs+idz3L5CsG8ZQvNCoMKTdZJ4+yPtELTiMSbPSXIQCa\nePdIHnY8dvQUgq5bjkae1M+QQWESBB89HFfsL2fzNvbZxqDEWkM1vtMi3clz\nJ4NM3xGU7c2EEMImdrfusm0zbRUYTpHTuXGADprEt02a0vDNgoIqenQWCAh3\nQnMH93KzVIxNl6wTpOdLLeMW/7S9uvNnCChIS0B1Nk77ADBulElwhlSa19Bc\n4cncXAQOJaQbHeuRMBrPEcbf9Ht7nmMtn6c8YFKLxx4EQP3aNTKuIEvtL8+X\nYOzm8kbWoLIgDR9umEijoBhDGfCyKKBn9beWZ/CKO6urF472vYkW/GKrZLG7\nG5d24YjnNX4NBnNxN6lQYf2lsZsAS1/726s9y0Cd3bTBiJueHv7Ty4bQzzHg\nFu6dmGpS+7Yj5+oj/BAfIEVi/P9FAkNq60ADic2wv0jXyVdexfL3uUaGH9y4\n4VoKJMU1qM4y1eMDJM0kawfjhrth9DY5mNX62E38UeYT6OHGDgIxq8P+WZD4\n0je2\r\n=JKL5\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"c3968ba433a2a728b46bcee2aa04c9065413a2b9","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","test":"mocha --require esm --recursive ./test/*.js && npm run dtslint","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts","dtslint":"echo Running dtslint; dtslint types","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.24.0","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"16.10.0","dependencies":{"md5":"^2.2.1","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","mocha":"8.4.0","sinon":"12.0.1","rollup":"2.56.3","dtslint":"4.2.1","prettier":"2.4.1","benchmark":"2.1.4","uglify-js":"3.14.4","typescript":"4.4.4","@babel/core":"7.16.0","@babel/register":"7.16.0","@babel/preset-env":"7.16.4","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.4.0_1639668794401_0.6709043942050696","host":"s3://npm-registry-packages"}},"3.5.0":{"name":"@imgix/js-core","version":"3.5.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.5.0","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"e325649c5be08aa81bd1940a9a4da61035b95274","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.5.0.tgz","fileCount":10,"integrity":"sha512-rUbvZBzGa9dFcoHqyzDA1Ag3kpEDKuKilpQS8XqUqTH6zpPw16922e8ciKFfxKfHdqMvC/yaYIE1HYo5MxzWvA==","signatures":[{"sig":"MEUCIGE7I6PyceU0TUjh02sTWwC/NQMKWveKisdWZ2bWzfe8AiEAwxFrDZejB4U1jp8knYnygE6foDZ5QDkFa/zHsa+STzY=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":88336,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiF8qJACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp0nA//eMP9yn/7FPe3aGgaCVD3BTsjETBiOj3oUyr3JBZiVHU6DoWc\r\nNUd7bR1BP3Hm4fKw1Z9k7GEz6rVJOx3vNqgZvHXMLsnZAd0dwKMrbq8xMw4R\r\nH30nR8BVkMnxBiekOjq6PtPBhlJw76+ZYxZAZZA3SGP28DRBo8GYH/d8QxP6\r\nvHT+y9qS/9zEjCQBgJvjYKc9Tb4vtQLhvZspTcUhb3beflimbd+kooX0cCAq\r\nTmoeDPS54TqunFBo4wkyG4s3hGs4CthikQTn7Z+p/AEdMcFCr06f+ILJz70E\r\nUF/AP0Waex61PkuNqM/FnJ13nXzMDiYaXsmP313VhHsYvxdTqLuCt9m1YLlx\r\ny3UFgnT0qHWX9Beec0QA1EuULE+yWfh+DZV92+SElzpzxS8Pp5Ly/nK3gACJ\r\nYBa5BnZWl988RM0DBRHoqnYApzQZsgQAsSLivgFRa41tFXj2iQ3pwDUugjDY\r\n1KCKfY3TW01+fnQatyimsM6hYQ9+cUEa3qE0qgZwtAxEF+r5wDlO8E2/0nlt\r\norb4eEIvm760w9NohYvdwHWB1kRrSOoPoX1HORPRdefmfOrIO3ivnEjNYV5H\r\nFv0ArBlEnhRtJ2fLI5P0oLllUDovyQMX+134vhxUhKIJjMPUjxdJnGca2fKc\r\njGK0D/QwK+mUMnmw1SQPFG5xdfderCV8bQc=\r\n=qBQN\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"bca9300bbe1a8e2eef9b8c222b92f0cc8a7c885f","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"17.5.0","dependencies":{"md5":"^2.2.1","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.19.1","mocha":"8.4.0","sinon":"12.0.1","rollup":"2.66.1","prettier":"2.5.1","benchmark":"2.1.4","uglify-js":"3.15.1","typescript":"4.5.5","@babel/core":"7.17.5","@babel/register":"7.17.0","@babel/preset-env":"7.16.11","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.5.0_1645726344927_0.10832134556784467","host":"s3://npm-registry-packages"}},"3.5.1":{"name":"@imgix/js-core","version":"3.5.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.5.1","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"00482a6469d55e424899101eb89ba9b0a8d49f18","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.5.1.tgz","fileCount":10,"integrity":"sha512-5gfOuyC0drq9TdEVR0+fR/PRZx4MqymsiTY38ZJoTXHz5D5IpnQhreroj7F4+VBKLdv96aCU9UyPGVjzSlzYIw==","signatures":[{"sig":"MEYCIQCKrE4tLmQi2XxqYGI5FquWfzV8yShsQ5yscgBBiq7OZAIhAJQVJM6ic+ql4vD5r8JW9Tv7bYG3lIOU1BYFuPEY4dvJ","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":88368,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiGTKeACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmp13Q//YdQK1VFKLJ8rinty9fAW7y5FWIzHld6L40ryXyRHoF3f+b3q\r\nz1zp6Qj0B1x2S/+3BuazJAWsCk4xxT6qLtK5jA2rRye8rgtrzDg4ELB0GPxe\r\nuu6ieAtCv6PJ1EjWCyp1TEAzbjgnNoHiwAp7QZrAhk2AOhwoRFfEIK3sWJLj\r\n7BudwOOBkM5fjki7eC/ndSjcnZM+HTRPGOUw3cXMHEL7vueLkXNWuSdim8qL\r\nhWnLCVZrwe6i/M+VWbeBRM9IIiUyEw2cmZTVjRJrHaQ7cg23uxpKdk50Wk2J\r\nIFm5OYxn3WNsqhPMFjh5a++cZ3bUOMq0BEdNgj9Yu/F0UWWYVv1HKdq7oSI2\r\ngA5BP2lpPPJ4z1wmSJ6Vdf9giTGUGxWjvB3x0YeP05W0Mfk72sfbWDXAkWgl\r\nejRkbKvajNthHCMeqqF1zTZuD3/YLJSD1PwWRx08yU8UMXaE8sj51OiL8hFC\r\nnd69LMPomoXGWxzodi4Jqbe+Uk0OuCM6S2fotmhHd0ZoFrarl/HP/DWYsJ1n\r\nUnbuyEGGSgcvOWUPRNuH7JSy8+QZVFSkslRnAyUEPvjGcqbz037xVYLXKtvk\r\n5KlXIcsDj0PbJmS/vkyAtpF7xkSk9Nr8fevTcked8CgUN9WUl0wx7r6Z4DaE\r\nSt0j1NwLxjTKTA8sNKuQp6SW9B7wGWqTrfo=\r\n=Hy3Z\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"9a617386958c1abd7bdf94ad1b6266dd046394ab","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"17.6.0","dependencies":{"md5":"^2.2.1","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.19.1","mocha":"8.4.0","sinon":"12.0.1","rollup":"2.66.1","prettier":"2.5.1","benchmark":"2.1.4","uglify-js":"3.15.1","typescript":"4.5.5","@babel/core":"7.17.5","@babel/register":"7.17.0","@babel/preset-env":"7.16.11","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.5.1_1645818526651_0.8073368020620835","host":"s3://npm-registry-packages"}},"3.6.0-rc.1":{"name":"@imgix/js-core","version":"3.6.0-rc.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.6.0-rc.1","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"483b0aaf857186a4fba34b0bc7d995af5f871108","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.6.0-rc.1.tgz","fileCount":11,"integrity":"sha512-k0kSoZiVjHKFxgz/IFvW6KUH/SE4CZfT6huFmT2hU9RhFmZczXfk0ND6PzrElvFzmchrPLsGdgS9NdjWxmgUlg==","signatures":[{"sig":"MEYCIQDwIBU5MSaAt1LBu8uMOsZHDTLMei9+E3lU7rrYRlteJQIhAIWEmPx1rvXp//i6ez0jyrFt/pgWjhpgbJLhyU8wyt9+","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":104704,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiH/evACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmrbjg//X7pI7Rxmi2teeKbcWUliomc3cZ7Znb0q/wBBcrVr3wepUzag\r\n0LQcqIZYrfgcHVp5THIV5Zu1/8WmPSrDXOMXbXmIAINQPyEa4uSaVc06eq4D\r\nFC/l9j9I7XWp+eIKzEFcAHNFOtNTps4pHDUJlHAvWGZ02Oh0GLrRVKIKxd45\r\ngtjmTBgMf4WIaKY2SGLbKLhXb9cYk7nzkdt0XSjeLXYafzbbDyJYGb0cI/if\r\ne99hNfXtMZseZJTjhKEp4eIQFBsNIvBpQ+fy0BYJ/OSc7Q++0bLJOWrCyGfM\r\n8uCIR/yTe01bVZmUWdsRNFAhkobWViTt6MoXx5DT+F9djh8lBne6MBXFNPDA\r\nANmTFgGwAECeE1qDd2XlzMHOp4l/8qMS7TzVE6p0GlysWtQiB/ZBWlABMMLB\r\nO5s3msd2dZZ7Yq2pzCae7PYK6ZRGybu2ndOp/XxtqHVrv3pVquEve1d10/T9\r\nATk9OWlPdBGZDr1cYANa062sswgrlCxJA9InJz7QLWhc103tBYUzCjinFF3P\r\nvJs+iQiJaoNZ/WDyck5gL92oiOxs1SGBQXIzFlSwJMI+xuL1t2b/p7YxZf9U\r\nEepztk43O6aVzUHIw40KL+TNsRZ5tEZg8GBVyfkyrar0WG/6dHj7D8cqLC4n\r\nrJCXGUwmDdcYmLxM3LNQp/GUHH2NPGM25LI=\r\n=ZJrI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","readme":"<!-- ix-docs-ignore -->\n\n![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)\n\n`@imgix/js-core` is a JavaScript library for generating image URLs with [imgix](https://www.imgix.com/) that can be used in browser or server-side settings.\n\n[![NPM Version](https://img.shields.io/npm/v/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Build Status](https://api.travis-ci.com/imgix/js-core.svg?branch=main)](https://travis-ci.com/github/imgix/js-core)\n[![Monthly Downloads](https://img.shields.io/npm/dm/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Minified Size](https://img.shields.io/bundlephobia/min/imgix-core-js)](https://bundlephobia.com/result?p=imgix-core-js)\n[![License](https://img.shields.io/github/license/imgix/js-core)](https://github.com/imgix/js-core/blob/main/LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_shield)\n\n---\n\n<!-- /ix-docs-ignore -->\n\n<!-- NB: Run `npx markdown-toc README.md --maxdepth 4 | sed -e 's/[[:space:]]\\{2\\}/    /g' | pbcopy` to generate TOC :) -->\n\n<!-- prettier-ignore-start -->\n\n- [Installing](#installing)\n- [Usage](#usage)\n    * [CommonJS](#commonjs)\n    * [ES6 Modules](#es6-modules)\n    * [In-browser](#in-browser)\n- [Configuration](#configuration)\n- [API](#api)\n    * [`ImgixClient.buildURL(path, params, options)`](#imgixclientbuildurlpath-params-options)\n    * [`ImgixClient.buildSrcSet(path, params, options)`](#imgixclientbuildsrcsetpath-params-options)\n        + [Fixed Image Rendering](#fixed-image-rendering)\n        + [Custom Widths](#custom-widths)\n        + [Width Tolerance](#width-tolerance)\n        + [Minimum and Maximum Width Ranges](#minimum-and-maximum-width-ranges)\n        + [Variable Qualities](#variable-qualities)\n        + [Disable Path Encoding](#disable-path-encoding)\n    * [Web Proxy Sources](#web-proxy-sources)\n- [What is the `Ixlib` Param on Every Request?](#what-is-the-ixlib-param-on-every-request)\n- [Testing](#testing)\n- [License](#license)\n\n<!-- prettier-ignore-end -->\n\n## Installing\n\n@imgix/js-core can be installed via npm:\n\n```bash\nnpm install @imgix/js-core\n```\n\n## Usage\n\nDepending on your module system, using @imgix/js-core is done a few different ways. The most common entry point will be the `ImgixClient` class. Whenever you provide data to `ImgixClient`, make sure it is not already URL-encoded, as the library handles proper encoding internally.\n\n### CommonJS\n\n```js\nconst ImgixClient = require('@imgix/js-core');\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', {\n  w: 400,\n  h: 300,\n});\n\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300&s=…\"\n```\n\n### ES6 Modules\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => 'https://testing.imgix.net/users/1.png?w=400&h=300&s=…'\n```\n\n### In-browser\n\n```js\nvar client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  // Do not use signed URLs with `secureURLToken` on the client side,\n  // as this would leak your token to the world. Signed URLs should\n  // be generated on the server.\n});\n\nvar url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300\"\n```\n\n## Configuration\n\nThe following options can be used when creating an instance of `ImgixClient`:\n\n- **`domain`:** String, required. The imgix domain that will be used when constructing URLs. Defaults to `null`.\n- **`useHTTPS`:** Boolean. Specifies whether constructed URLs should use the HTTPS protocol. Defaults to `true`.\n- **`includeLibraryParam`:** Boolean. Specifies whether the constructed URLs will include an [`ixlib` parameter](#what-is-the-ixlib-param-on-every-request). Defaults to `true`.\n- **`secureURLToken`:** String. When specified, this token will be used to sign images. Read more about securing images [on the imgix Docs site](https://docs.imgix.com/setup/securing-images). Defaults to `null`.\n\n## API\n\n### `ImgixClient.buildURL(path, params, options)`\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of modifiers, described below:\n  - [**`disablePathEncoding`**](#disable-path-encoding)\n\nConstruct a single image URL by passing in the image `path` and any rendering API parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst url = client.buildURL('folder/image.jpg', {\n  w: 1000,\n});\n```\n\n**Returns**: an image URL as a string.\n\n```html\nhttps://testing.imgix.net/folder/image.jpg?w=1000&ixlib=js-...\n```\n\n### `ImgixClient.buildSrcSet(path, params, options)`\n\n<!-- prettier-ignore-start -->\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of srcset modifiers, described below:\n  - [**`widths`**](#custom-widths)\n  - [**`widthTolerance`**](#width-tolerance)\n  - [**`minWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`maxWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`disableVariableQuality`**](#variable-qualities)\n  - [**`devicePixelRatios`**](#fixed-image-rendering)\n  - [**`variableQualities`**](#variable-qualities)\n  - [**`disablePathEncoding`**](#disable-path-encoding)\n\n<!-- prettier-ignore-end -->\n\nThe @imgix/js-core module allows for generation of custom `srcset` attributes, which can be invoked through `buildSrcSet()`. By default, the `srcset` generated will allow for responsive size switching by building a list of image-width mappings.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg');\n\nconsole.log(srcset);\n```\n\n**Returns**: A `srcset` attribute value as a string.\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&s=e2e581a39c917bdee50b2f8689c30893 100w,\nhttps://testing.imgix.net/image.jpg?w=116&s=836e0bc15da2ad74af8130d93a0ebda6 116w,\nhttps://testing.imgix.net/image.jpg?w=134&s=688416d933381acda1f57068709aab79 134w,\n                                            ...\nhttps://testing.imgix.net/image.jpg?w=7400&s=91779d82a0e1ac16db04c522fa4017e5 7400w,\nhttps://testing.imgix.net/image.jpg?w=8192&s=59eb881b618fed314fe30cf9e3ec7b00 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Fixed Image Rendering\n\nSpecifying either a `w` or a `h` parameter to `buildSrcSet()` will create a DPR-based srcset. This DPR-based srcset allows for the fixed-sized image to be served at different resolutions (i.e. at different pixel densities).\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {\n  h: 800,\n  ar: '3:2',\n  fit: 'crop',\n});\n\nconsole.log(srcset);\n```\n\nWill produce the following attribute value:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74 1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82 2x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=3&s=8b93ab83d3f1ede4887e6826112d60d1 3x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=4&s=df7b67aa0439588edbfc1c249b3965d6 4x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=5&s=7c4b8adb733db37d00240da4ca65d410 5x\n```\n\n<!-- prettier-ignore-end -->\n\nThis library generate by default `1` to `5` dpr `srcset`.\nYou can control generated target ratios with `devicePixelRatios` parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {\n    h: 800,\n    ar: '3:2',\n    fit: 'crop',\n  },\n  {\n    devicePixelRatios: [1, 2],\n  },\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74\n1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82\n2x\n```\n\nFor more information to better understand `srcset`, we highly recommend [Eric Portis' \"Srcset and sizes\" article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.\n\n#### Custom Widths\n\nIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { widths: [100, 500, 1000, 1800] },\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following `srcset` of width pairs:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=1000 1000w,\nhttps://testing.imgix.net/image.jpg?w=1800 1800w\n```\n\n**Note:** that in situations where a `srcset` is being rendered as a [fixed image](#fixed-image-rendering), any custom `widths` passed in will be ignored. Additionally, if both `widths` and a `widthTolerance` are passed to the `buildSrcSet` method, the custom widths list will take precedence.\n\n#### Width Tolerance\n\nThe `srcset` width tolerance dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.\n\nBy default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as `widthTolerance` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {}, { widthTolerance: 0.2 });\n\nconsole.log(srcset);\n```\n\nIn this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=140 140w,\nhttps://testing.imgix.net/image.jpg?w=196 196w,\n          ...\nhttps://testing.imgix.net/image.jpg?w=8192 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Minimum and Maximum Width Ranges\n\nIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `buildSrcSet()` method. To do this, you can pass in an options object as a third argument, providing positive integers as `minWidth` and/or `maxWidth` attributes:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { minWidth: 500, maxWidth: 2000 },\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller, more tailored srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=580 580w,\nhttps://testing.imgix.net/image.jpg?w=672 672w,\nhttps://testing.imgix.net/image.jpg?w=780 780w,\nhttps://testing.imgix.net/image.jpg?w=906 906w,\nhttps://testing.imgix.net/image.jpg?w=1050 1050w,\nhttps://testing.imgix.net/image.jpg?w=1218 1218w,\nhttps://testing.imgix.net/image.jpg?w=1414 1414w,\nhttps://testing.imgix.net/image.jpg?w=1640 1640w,\nhttps://testing.imgix.net/image.jpg?w=1902 1902w,\nhttps://testing.imgix.net/image.jpg?w=2000 2000w\n```\n\nRemember that browsers will apply a device pixel ratio as a multiplier when selecting which image to download from a `srcset`. For example, even if you know your image will render no larger than 1000px, specifying `options: { max_srcset: 1000 }` will give your users with DPR higher than 1 no choice but to download and render a low-resolution version of the image. Therefore, it is vital to factor in any potential differences when choosing a minimum or maximum range.\n\n**Note:** that according to the [imgix API](https://docs.imgix.com/apis/url/size/w), the maximum renderable image width is 8192 pixels.\n\n#### Variable Qualities\n\nThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-image](https://github.com/imgix/js-core#fixed-image-rendering) srcset. This technique is commonly used to compensate for the increased filesize of high-DPR images. Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall filesize without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).\n\nThis behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `{ disableVariableQuality: true }` to the third argument of `buildSrcSet()`.\n\nThis behavior specifically occurs when a [fixed-size image](https://github.com/imgix/js-core#fixed-image-rendering) is rendered, for example:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet('image.jpg', { w: 100 });\n\nconsole.log(srcset);\n```\n\nWill generate a srcset with the following `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=75 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=50 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=35 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=23 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=20 5x\n```\n\nQuality parameters is overridable for each `dpr` by passing `variableQualities` parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  includeLibraryParam: false,\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  { w: 100 },\n  { variableQualities: { 1: 45, 2: 30, 3: 20, 4: 15, 5: 10 } },\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following custom `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=45 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=30 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=20 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=15 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=10 5x\n```\n\n#### Disable Path Encoding\n\nThis library will encode by default all paths passed to both `buildURL` and `buildSrcSet` methods. To disable path encoding, pass `{ disablePathEncoding: true }` to the third argument `options` of `buildURL()` or `buildSrcSet()`.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst src = client.buildURL(\n  'file+with%20some+crazy?things.jpg',\n  {},\n  { disablePathEncoding: true },\n);\nconsole.log(src);\n\nconst srcset = client.buildSrcSet(\n  'file+with%20some+crazy?things.jpg',\n  {},\n  { disablePathEncoding: true },\n);\nconsole.log(srcset);\n```\n\nNormally this would output a src of `https://sdk-test.imgix.net/file%2Bwith%2520some%2Bcrazy%3Fthings.jpg`, but since path encoding is disabled, it will output a src of `https://sdk-test.imgix.net/file+with%20some+crazy?things.jpg`.\n\n### Web Proxy Sources\n\nIf you are using a [Web Proxy Source](https://docs.imgix.com/setup/creating-sources/web-proxy), all you need to do is pass the full image URL you would like to proxy to `@imgix/js-core` as the path, and include a `secureURLToken` when creating the client. `@imgix/js-core` will then encode this full URL into a format that imgix will understand, thus creating a proxy URL for you.\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'my-proxy-domain.imgix.net',\n  secureURLToken: '<token>',\n});\n\nclient.buildURL('https://example.com/image-to-proxy.jpg', {});\nclient.buildSrcSet('https://example.com/image-to-proxy.jpg', {});\n```\n\n## What is the `Ixlib` Param on Every Request?\n\nFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.\n\nThis can be disabled by passing a falsy value for the `includeLibraryParam` option to `new ImgixClient`:\n\n```js\nnew ImgixClient({\n  domain: 'my-source.imgix.net',\n  includeLibraryParam: false,\n});\n```\n\n## Testing\n\n@imgix/js-core uses mocha for testing. Here’s how to run those tests:\n\n```bash\nnpm test\n```\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_large)\n","gitHead":"26df3be6b2f5230e423a03c096a03a9728f0561c","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"17.6.0","dependencies":{"md5":"^2.2.1","ufo":"^0.7.10","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"esm":"3.2.25","tsd":"0.19.1","mocha":"8.4.0","sinon":"12.0.1","rollup":"2.66.1","prettier":"2.5.1","benchmark":"2.1.4","uglify-js":"3.15.1","typescript":"4.5.5","@babel/core":"7.17.5","@babel/register":"7.17.0","@babel/preset-env":"7.16.11","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.6.0-rc.1_1646262191555_0.40848551987147763","host":"s3://npm-registry-packages"}},"3.6.0":{"name":"@imgix/js-core","version":"3.6.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.6.0","maintainers":[{"name":"fredfogerty","email":"frederick.fogerty@gmail.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"albertmejia","email":"albert@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"fea27da03696264fe0fa4d6f74e928b9e17fc764","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.6.0.tgz","fileCount":11,"integrity":"sha512-00qsHfyk7HvSj5NJdLA5O2QeBUVPM0khpO0qQvyMBmVP9aZaYJWkMd1IXQm0TUvcI1+Ja2mvdPzRYULFCiQBTg==","signatures":[{"sig":"MEUCID0FtJGDsZvD9txANv/byWWPCrc9g01IxO1TC42Mg9kWAiEA2mUxQnjHvbI1nBsTTGu4BieFFbcymTF1pxos4JuJQTQ=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":104672,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJiYb/6ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmo7fw/+Ox6nlmbo08XuoXMav045TmQKrzh5WowQhzx0qMdSnGUB0C2I\r\np3rI/Kp66SQDJHyW2vX6hJFQQGalTvYWVFhqh+8xCCHyfRiBYDlCTZry/YTv\r\nHroRToEZi89QkbcKRltwd2PI398q11ZJbHSqyZLPM9Ce+/qeIZJCzP9FEJm5\r\nUarYqd6DWjVx++tKZLxb4U4jLg6QJyFkdyY0LMQnAugbXH/ccmvtzVHjMSKf\r\nrVTaG91tGCpFam/INcUhJ2NDVLdPq2o8hW4fYd+E30XwlSWpl9BM0AlgQhLq\r\nbzAterEeTHVp2ACaw4vT5fbF4UM2Qqea/POBvTBvIYr3lKZmFqEcNQhAzVjm\r\nVNjwIccY+Ia1K10FCGgU7fjPn2pS1jTe2ImOmg4qupaDARlSu/Qf5Hc6Y6ZL\r\nKk14Q14cNLknicu3wds68KX9IjL2K6ssDD2I/wZWfwfgfU2B4lx6gwgJdUjz\r\nVpa2i/pWn4FCALHa95W8NUeBiCFLWID+pX0acLmHjhpU3Q8PfAmUJ6nKcfMC\r\n137m9YIqCxCKgk1J/F9ifYi/kQXKazk/9EahNfrda+8rPvIifeHj8hwnTkV3\r\nIghyba/WhBlBhzUxeuwFkVb0z/sAhW9YHyagxz3ijo6Q3yo8xpa+G2xUGyfc\r\nYvsptvPhbAjRneUQbL/LiBMwq9z2/4OdwYk=\r\n=rNoh\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"e3f97dc337f68d6c6257f2623ae37d4ab11b103e","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"18.0.0","dependencies":{"md5":"^2.2.1","ufo":"^0.7.10","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.19.1","mocha":"8.4.0","sinon":"13.0.1","rollup":"2.70.1","prettier":"2.6.2","benchmark":"2.1.4","uglify-js":"3.15.3","typescript":"4.5.5","@babel/core":"7.17.9","@babel/register":"7.17.7","@babel/preset-env":"7.16.11","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.6.0_1650573306546_0.8163416206785699","host":"s3://npm-registry-packages"}},"3.6.1-rc.1":{"name":"@imgix/js-core","version":"3.6.1-rc.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.6.1-rc.1","maintainers":[{"name":"atlawrie","email":"alice.lawrie@imgix.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"4a91a5741b1848539d9c26a84c8a49863b9d40dc","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.6.1-rc.1.tgz","fileCount":11,"integrity":"sha512-q8CWiB397EBvJuK+JQFsR2mwYSNjVfjEkjKNjtiXELBHJdFxpLK4Zy6VlqYKimLDPCPrn34e7ZGEW9GJf1g/BA==","signatures":[{"sig":"MEYCIQD3gYml9ECSdgwdoYMJUIVergEjGtNrGJYpyOHehwXX9gIhANJtjYXIg/Qt6jrt0IQ5MKgrWuGt4c+A04KIdXJmOw13","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":105018,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjOxs2ACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2Vmqm3Q/9HCvV11PG0RDXSH6L+nG6mqvHnJ2Bb8UIWuCGj6N8OMZao0FM\r\ny51ZJJgJaH0AaRZxlsaGPNDq9Ppm9YQP1gRxlZg0+KgTPQS54YWfQLmEkWEy\r\nDd335Iq158b1bOjg7Mkc/imPqu/ZTC8Rls5PR6csGvPqSnJlIqz44L/JzEzy\r\n1gqhsHH8migaBzX7Wa09iIZD9OuELfntC9WJ9xMUlAommTdHiWRtvhUZ8nv/\r\n378U8bdj51HXrKOsm0H/uu2StY8/HeqdypPmJQ8P17rbLyljyR00kZsVSWF6\r\n05MBe0HTIcmMHoBEYKmn16PYbVI4XfRp8DsqBnIqXhwo1UOROdwbnhNV8E3F\r\nBbUTGVQRQiZYY/s2L1nNUnbi1wdQm2BaXtd0PcttwRna9yxaYH4+oYJOD6Qr\r\nSlE3ocvmE5h/bbZp8LPyXW+iuhAwq2mW1AmHkjNPmzL6KOUC8CA/qXyzjDpo\r\nz/p5wuyiCF//fgYC48hm2q4D/Y7prE4zpkhRo0ddUG7cyURJLm3Lu9cSmhYq\r\nWqEIjU+GS8PiJ1TPXWf1gW4Vhg9N7Xwo5kgB/7tgmctbXuw810cPf6KmYNCl\r\nvUkke1gapk2Gum3sKP1XO+LNcBxb63VW/L7t21e9yLb4Cst/8GEP3zZ7vS/j\r\n2ZRtln9ABAriK0OaTacyhzKS/WhvIs9OuMU=\r\n=mlxo\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","readme":"<!-- ix-docs-ignore -->\n\n![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)\n\n`@imgix/js-core` is a JavaScript library for generating image URLs with [imgix](https://www.imgix.com/) that can be used in browser or server-side settings.\n\n[![NPM Version](https://img.shields.io/npm/v/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Build Status](https://circleci.com/gh/imgix/js-core.svg?style=shield)](https://circleci.com/gh/imgix/js-core)\n[![Monthly Downloads](https://img.shields.io/npm/dm/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Minified Size](https://img.shields.io/bundlephobia/min/imgix-core-js)](https://bundlephobia.com/result?p=imgix-core-js)\n[![License](https://img.shields.io/github/license/imgix/js-core)](https://github.com/imgix/js-core/blob/main/LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_shield)\n\n---\n\n<!-- /ix-docs-ignore -->\n\n<!-- NB: Run `npx markdown-toc README.md --maxdepth 4 | sed -e 's/[[:space:]]\\{2\\}/    /g' | pbcopy` to generate TOC :) -->\n\n<!-- prettier-ignore-start -->\n\n- [Installing](#installing)\n- [Usage](#usage)\n    * [CommonJS](#commonjs)\n    * [ES6 Modules](#es6-modules)\n    * [In-browser](#in-browser)\n- [Configuration](#configuration)\n- [API](#api)\n    * [`ImgixClient.buildURL(path, params, options)`](#imgixclientbuildurlpath-params-options)\n    * [`ImgixClient.buildSrcSet(path, params, options)`](#imgixclientbuildsrcsetpath-params-options)\n        + [Fixed Image Rendering](#fixed-image-rendering)\n        + [Custom Widths](#custom-widths)\n        + [Width Tolerance](#width-tolerance)\n        + [Minimum and Maximum Width Ranges](#minimum-and-maximum-width-ranges)\n        + [Variable Qualities](#variable-qualities)\n        + [Disable Path Encoding](#disable-path-encoding)\n    * [Web Proxy Sources](#web-proxy-sources)\n- [What is the `Ixlib` Param on Every Request?](#what-is-the-ixlib-param-on-every-request)\n- [Support for Management API](#support-for-management-api)\n- [Testing](#testing)\n- [License](#license)\n\n<!-- prettier-ignore-end -->\n\n## Installing\n\n@imgix/js-core can be installed via npm:\n\n```bash\nnpm install @imgix/js-core\n```\n\n## Usage\n\nDepending on your module system, using @imgix/js-core is done a few different ways. The most common entry point will be the `ImgixClient` class. Whenever you provide data to `ImgixClient`, make sure it is not already URL-encoded, as the library handles proper encoding internally.\n\n### CommonJS\n\n```js\nconst ImgixClient = require('@imgix/js-core');\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', {\n  w: 400,\n  h: 300,\n});\n\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300&s=…\"\n```\n\n### ES6 Modules\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => 'https://testing.imgix.net/users/1.png?w=400&h=300&s=…'\n```\n\n### In-browser\n\n```js\nvar client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  // Do not use signed URLs with `secureURLToken` on the client side,\n  // as this would leak your token to the world. Signed URLs should\n  // be generated on the server.\n});\n\nvar url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300\"\n```\n\n## Configuration\n\nThe following options can be used when creating an instance of `ImgixClient`:\n\n- **`domain`:** String, required. The imgix domain that will be used when constructing URLs. Defaults to `null`.\n- **`useHTTPS`:** Boolean. Specifies whether constructed URLs should use the HTTPS protocol. Defaults to `true`.\n- **`includeLibraryParam`:** Boolean. Specifies whether the constructed URLs will include an [`ixlib` parameter](#what-is-the-ixlib-param-on-every-request). Defaults to `true`.\n- **`secureURLToken`:** String. When specified, this token will be used to sign images. Read more about securing images [on the imgix Docs site](https://docs.imgix.com/setup/securing-images). Defaults to `null`.\n  - :warning: *The `secureURLToken` option should only be used in server-side applications to prevent exposing your secure token.* :warning:\n\n\n## API\n\n### `ImgixClient.buildURL(path, params, options)`\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of modifiers, described below:\n  - [**`disablePathEncoding`**](#disable-path-encoding)\n\nConstruct a single image URL by passing in the image `path` and any rendering API parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst url = client.buildURL('folder/image.jpg', {\n  w: 1000,\n});\n```\n\n**Returns**: an image URL as a string.\n\n```html\nhttps://testing.imgix.net/folder/image.jpg?w=1000&ixlib=js-...\n```\n\n### `ImgixClient.buildSrcSet(path, params, options)`\n\n<!-- prettier-ignore-start -->\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of srcset modifiers, described below:\n  - [**`widths`**](#custom-widths)\n  - [**`widthTolerance`**](#width-tolerance)\n  - [**`minWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`maxWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`disableVariableQuality`**](#variable-qualities)\n  - [**`devicePixelRatios`**](#fixed-image-rendering)\n  - [**`variableQualities`**](#variable-qualities)\n  - [**`disablePathEncoding`**](#disable-path-encoding)\n\n<!-- prettier-ignore-end -->\n\nThe @imgix/js-core module allows for generation of custom `srcset` attributes, which can be invoked through `buildSrcSet()`. By default, the `srcset` generated will allow for responsive size switching by building a list of image-width mappings.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n});\n\nconst srcset = client.buildSrcSet('image.jpg');\n\nconsole.log(srcset);\n```\n\n**Returns**: A `srcset` attribute value as a string.\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&s=e2e581a39c917bdee50b2f8689c30893 100w,\nhttps://testing.imgix.net/image.jpg?w=116&s=836e0bc15da2ad74af8130d93a0ebda6 116w,\nhttps://testing.imgix.net/image.jpg?w=134&s=688416d933381acda1f57068709aab79 134w,\n                                            ...\nhttps://testing.imgix.net/image.jpg?w=7400&s=91779d82a0e1ac16db04c522fa4017e5 7400w,\nhttps://testing.imgix.net/image.jpg?w=8192&s=59eb881b618fed314fe30cf9e3ec7b00 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Fixed Image Rendering\n\nSpecifying either a `w` or a `h` parameter to `buildSrcSet()` will create a DPR-based srcset. This DPR-based srcset allows for the fixed-sized image to be served at different resolutions (i.e. at different pixel densities).\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {\n  h: 800,\n  ar: '3:2',\n  fit: 'crop',\n});\n\nconsole.log(srcset);\n```\n\nWill produce the following attribute value:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74 1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82 2x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=3&s=8b93ab83d3f1ede4887e6826112d60d1 3x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=4&s=df7b67aa0439588edbfc1c249b3965d6 4x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=5&s=7c4b8adb733db37d00240da4ca65d410 5x\n```\n\n<!-- prettier-ignore-end -->\n\nThis library generate by default `1` to `5` dpr `srcset`.\nYou can control generated target ratios with `devicePixelRatios` parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {\n    h: 800,\n    ar: '3:2',\n    fit: 'crop',\n  },\n  {\n    devicePixelRatios: [1, 2],\n  },\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74\n1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82\n2x\n```\n\nFor more information to better understand `srcset`, we highly recommend [Eric Portis' \"Srcset and sizes\" article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.\n\n#### Custom Widths\n\nIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { widths: [100, 500, 1000, 1800] },\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following `srcset` of width pairs:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=1000 1000w,\nhttps://testing.imgix.net/image.jpg?w=1800 1800w\n```\n\n**Note:** that in situations where a `srcset` is being rendered as a [fixed image](#fixed-image-rendering), any custom `widths` passed in will be ignored. Additionally, if both `widths` and a `widthTolerance` are passed to the `buildSrcSet` method, the custom widths list will take precedence.\n\n#### Width Tolerance\n\nThe `srcset` width tolerance dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.\n\nBy default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as `widthTolerance` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {}, { widthTolerance: 0.2 });\n\nconsole.log(srcset);\n```\n\nIn this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=140 140w,\nhttps://testing.imgix.net/image.jpg?w=196 196w,\n          ...\nhttps://testing.imgix.net/image.jpg?w=8192 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Minimum and Maximum Width Ranges\n\nIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `buildSrcSet()` method. To do this, you can pass in an options object as a third argument, providing positive integers as `minWidth` and/or `maxWidth` attributes:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { minWidth: 500, maxWidth: 2000 },\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller, more tailored srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=580 580w,\nhttps://testing.imgix.net/image.jpg?w=672 672w,\nhttps://testing.imgix.net/image.jpg?w=780 780w,\nhttps://testing.imgix.net/image.jpg?w=906 906w,\nhttps://testing.imgix.net/image.jpg?w=1050 1050w,\nhttps://testing.imgix.net/image.jpg?w=1218 1218w,\nhttps://testing.imgix.net/image.jpg?w=1414 1414w,\nhttps://testing.imgix.net/image.jpg?w=1640 1640w,\nhttps://testing.imgix.net/image.jpg?w=1902 1902w,\nhttps://testing.imgix.net/image.jpg?w=2000 2000w\n```\n\nRemember that browsers will apply a device pixel ratio as a multiplier when selecting which image to download from a `srcset`. For example, even if you know your image will render no larger than 1000px, specifying `options: { max_srcset: 1000 }` will give your users with DPR higher than 1 no choice but to download and render a low-resolution version of the image. Therefore, it is vital to factor in any potential differences when choosing a minimum or maximum range.\n\n**Note:** that according to the [imgix API](https://docs.imgix.com/apis/url/size/w), the maximum renderable image width is 8192 pixels.\n\n#### Variable Qualities\n\nThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-image](https://github.com/imgix/js-core#fixed-image-rendering) srcset. This technique is commonly used to compensate for the increased filesize of high-DPR images. Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall filesize without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).\n\nThis behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `{ disableVariableQuality: true }` to the third argument of `buildSrcSet()`.\n\nThis behavior specifically occurs when a [fixed-size image](https://github.com/imgix/js-core#fixed-image-rendering) is rendered, for example:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet('image.jpg', { w: 100 });\n\nconsole.log(srcset);\n```\n\nWill generate a srcset with the following `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=75 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=50 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=35 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=23 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=20 5x\n```\n\nQuality parameters is overridable for each `dpr` by passing `variableQualities` parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  { w: 100 },\n  { variableQualities: { 1: 45, 2: 30, 3: 20, 4: 15, 5: 10 } },\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following custom `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=45 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=30 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=20 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=15 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=10 5x\n```\n\n#### Disable Path Encoding\n\nThis library will encode by default all paths passed to both `buildURL` and `buildSrcSet` methods. To disable path encoding, pass `{ disablePathEncoding: true }` to the third argument `options` of `buildURL()` or `buildSrcSet()`.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst src = client.buildURL(\n  'file+with%20some+crazy?things.jpg',\n  {},\n  { disablePathEncoding: true },\n);\nconsole.log(src);\n\nconst srcset = client.buildSrcSet(\n  'file+with%20some+crazy?things.jpg',\n  {},\n  { disablePathEncoding: true },\n);\nconsole.log(srcset);\n```\n\nNormally this would output a src of `https://sdk-test.imgix.net/file%2Bwith%2520some%2Bcrazy%3Fthings.jpg`, but since path encoding is disabled, it will output a src of `https://sdk-test.imgix.net/file+with%20some+crazy?things.jpg`.\n\n### Web Proxy Sources\n\nIf you are using a [Web Proxy Source](https://docs.imgix.com/setup/creating-sources/web-proxy), all you need to do is pass the full image URL you would like to proxy to `@imgix/js-core` as the path, and include a `secureURLToken` when creating the client. `@imgix/js-core` will then encode this full URL into a format that imgix will understand, thus creating a proxy URL for you.\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'my-proxy-domain.imgix.net',\n  secureURLToken: '<token>',\n});\n\nclient.buildURL('https://example.com/image-to-proxy.jpg', {});\nclient.buildSrcSet('https://example.com/image-to-proxy.jpg', {});\n```\n\n## What is the `Ixlib` Param on Every Request?\n\nFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.\n\nThis can be disabled by passing a falsy value for the `includeLibraryParam` option to `new ImgixClient`:\n\n```js\nnew ImgixClient({\n  domain: 'my-source.imgix.net',\n  includeLibraryParam: false,\n});\n```\n\n## Support for Management API\n\nUsers looking for client library support for the imgix [management API](https://docs.imgix.com/apis/management) should use the [imgix-management-js](https://github.com/imgix/imgix-management-js) library. These two projects may be merged at a future date.\n\n## Testing\n\n@imgix/js-core uses mocha for testing. Here’s how to run those tests:\n\n```bash\nnpm test\n```\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_large)\n","gitHead":"85a2b8142540018f5b37f2895d6c2b57bf097f45","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","prepublishOnly":"npm run build && npm run compile && npm run assert_version","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"18.10.0","dependencies":{"md5":"^2.2.1","ufo":"^0.8.0","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"readmeFilename":"README.md","devDependencies":{"esm":"3.2.25","tsd":"0.22.0","mocha":"8.4.0","sinon":"13.0.2","rollup":"2.79.0","prettier":"2.7.1","benchmark":"2.1.4","uglify-js":"3.17.0","typescript":"4.8.3","@babel/core":"7.18.13","@babel/register":"7.18.9","@babel/preset-env":"7.18.10","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.6.1-rc.1_1664817974249_0.46276036610527416","host":"s3://npm-registry-packages"}},"3.6.1":{"name":"@imgix/js-core","version":"3.6.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.6.1","maintainers":[{"name":"atlawrie","email":"alice.lawrie@imgix.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"b562ab22ae22620f6ab4ea65b9498717823fa76f","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.6.1.tgz","fileCount":11,"integrity":"sha512-j37swJx6u1YLNm/O4W9mJ2KFpsDm22NShXpcAk8VaXANSiyUn45tPdU9MCZOy5S366G/0+pKlyTLYGUJJ0FiJQ==","signatures":[{"sig":"MEQCIGPsGLiHZmzKT7YpAeDge6GNFFSXznweihv5HkT9PqLnAiBty1eiRROksoQqph+9WJHcMUXSLKCQZT76OVpThFgHCA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":104993,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjRadHACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoQkBAAh03lF6KKobwf1+8mnA07o4HIk3O3o5QDn/T481RujoiNWVsl\r\n68MkrsadappjeOShFLGCcdxpJVKio6wvRF/XmUq1pNQY8vbeWQXtPBYmMc7R\r\n9VObXdNBDIj+hfbCLDquv8dxg3Rfhap4JPztOT7maRHLkxoh1x+BKutgqqBb\r\nyTaS099XQXMBpyYTHsBkIn5ywyVnhOEXf6XIN70E6r+bQrg0TggqXNSJ6wa2\r\nYlhSXgvtjCaKJ4vdW4Ygi7e5PaK1++K8hJxwR7VakSEa9LBKT8tXDFvfuqMP\r\nu+FS7txF3UODCRl0DlqXORaVWa/s0j29sMlPXoMkY9erA+RWovTK/e57CK7h\r\newvmXfzBNEmkqmQrVoHfQOFue2Nq32aAAvbBNd6MQU3/gGVESDu+sC7tq9Pv\r\ng0F6OqHgcgiwWzDDwnBXqcZ6MeDUUj44a6TjKps6KLCnzijng90DEHaCX2db\r\nn/cbaKRfrSsP7JR6RsO+LV5+6gWf/ktWCIUguJwqu1VmH+KIxGRmSpvmsvJY\r\n6c5UARVGszyx7EZHcy84rw7zGDOggtf64g50a3ZKZRcKVb+q7mnyp6Vbbsxs\r\n27ZRqKzweWDL2YjHv11e42pgkXlJ+5R7t9OJcKlA7MpunsdK6OUBaAGkN90w\r\n5nAPiq2NYuaCQpP0qsgbHMAT6cva9ycB1vM=\r\n=/M36\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"2966512671e7382c4c8ff01754314867da0a4e80","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","prepublishOnly":"npm run build && npm run compile && npm run assert_version","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"18.10.0","dependencies":{"md5":"^2.2.1","ufo":"^0.8.0","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.22.0","mocha":"8.4.0","sinon":"13.0.2","rollup":"2.79.1","prettier":"2.7.1","benchmark":"2.1.4","uglify-js":"3.17.0","typescript":"4.8.3","@babel/core":"7.18.13","@babel/register":"7.18.9","@babel/preset-env":"7.18.10","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.6.1_1665509191376_0.7407814010293026","host":"s3://npm-registry-packages"}},"3.7.0":{"name":"@imgix/js-core","version":"3.7.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.7.0","maintainers":[{"name":"atlawrie","email":"alice.lawrie@imgix.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"9bbfc26c5eb144594b9962d8872ecbbc493e7e8f","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.7.0.tgz","fileCount":11,"integrity":"sha512-TjRohuczdpamoR+YWQpUTQvw59L4lOKIeWd9agAlEVoZo6PQx8LVsmCLANY4cZEmrfJqGfi3ijf4SdUvU3UYoQ==","signatures":[{"sig":"MEQCIDX2yUzQljL8zWXBTBVdI0i+70adnJOApLZMYizplAvNAiAGvCLfKJq+l9twBGVpBjXuNgMWr29w4Pw1PvEq88Y/EA==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":105962,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjYCpRACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoR1A/+NiXe/aWvfkUWLS2Zwu7rms4vb3h7Dnktlknq+f9U6O4Z6HKN\r\nAaF1GLDdniGBpY4+8yoMeN/o9v/rc0rUkv2N2j+NgJdeSd4cK4NqBWMuQZxt\r\nD/P2pkl4n4rIh5CSdIJYWPsacI/KWHQIJk6iGgezCVQBjlvrbqBb/eCj98l2\r\nrr6V278sLcJ16etJ6HxaltJK+OEOvHGABkoDvBkncEVIKBvft5V8Vv5kGTbm\r\nfqB5puF6gyN1VqzetiCBo9fL9B1TG2LTRbidCyPbYElMWIjdi/uagcMz49f/\r\nlypGnGqFXMc8sDWpRPpknhpRlzoZphuChbs+SUXIBYDGnMq41wh/fHrk8P4U\r\nvy/1ewjsBGX2K73k1+2KBaSz/l02SygFN1ec4fNlQ9mOXzsp31OV+U23oKRV\r\n9x/rH/l1OFSNams3sFpdbFJsS0hSgE4SXRuVB8/tb5AIuqF0+QjqeRSjaY4o\r\nFuY2VfxFa5b1JHA873Zlb2KNl27oJ7x97lvjElgzHNPfQ8KLnPss2c2hK/HN\r\n4az1DOktBEPPb1h3S5WvxYAZEYd7fgQpJiV4BC0WbcD3tySnXCqLVP3nv/Dz\r\nsoWMhYssY3X3QrHFrUjCcG1Ex6Bb0+9DkzsVBpt08rDhAWqFrAfryAMQiwWz\r\nVEHwRiH83IBWpD8fKHQqMMDw3NsjMfhc67k=\r\n=t1CI\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"4208000b41b8b6194a68c40c32ba091f1cbf605b","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","prepublishOnly":"npm run build && npm run compile && npm run assert_version","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"19.0.0","dependencies":{"md5":"^2.2.1","ufo":"^0.8.0","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.22.0","mocha":"8.4.0","sinon":"13.0.2","rollup":"2.79.1","prettier":"2.7.1","benchmark":"2.1.4","uglify-js":"3.17.4","typescript":"4.8.4","@babel/core":"7.18.13","@babel/register":"7.18.9","@babel/preset-env":"7.18.10","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.7.0_1667246673384_0.0031660566984914595","host":"s3://npm-registry-packages"}},"3.7.1":{"name":"@imgix/js-core","version":"3.7.1","license":"BSD-2-Clause","_id":"@imgix/js-core@3.7.1","maintainers":[{"name":"atlawrie","email":"alice.lawrie@imgix.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"56dbe6e9f4425e81dcbeb02084d1908c78d4723c","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.7.1.tgz","fileCount":11,"integrity":"sha512-2L0j12fkLVZaIqsNjSbZPftAl3OhP6HBjVycn8Ery284OpJvOZ/ftMPJjrQeqoBys6gunC6v4csgx3CqztBLHw==","signatures":[{"sig":"MEUCIDtrW2K6XHuSEqnwhiGYtK9d3Pr/4MMbwecOaB/X1oN0AiEAyBc3Ca6EFOz9krNyvNIQfu0JpDQIyp487RItCmS6qnc=","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":107756,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjpjtLACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmrAyw//T8JtDGyvDHZtdWxpEdTKt8xxAMXSEp+J6GKqvIF7a8FPOW0O\r\nxxTkOC7gtOa5Kum8g7YdH9iN+KlIrwjz5wiQ46a3mXbmu5xM0HyJuwvqdrsO\r\nASryT1f9hHRVnVhWQRGDBoveiEO5zF6/OFXZ8GTVQYDNqZTvNyTAoFeAUFGf\r\noc5Ii9hXfkAUpmQcZZEhyoq15KeZPdhGocqC7Esu2vCE4rVIKGbqANCPwNXV\r\nYEvd46RUgA31z0Ne+bluWkvm+6lB9eQkRd6EpeaciRpJ/kwrwtx6+/GbUtlf\r\nokaPRO4KNnwatX4ZlcVswPdWw4gwvW34rX34/Mio0djLMzT0PVbnE+j5j2fO\r\nschlkOJXXiqowpylTP7odI9WRpLkJa2Sx193YvOZA2d7VBv5qWXRkEqimO6C\r\n8y/1GwnGCNGSZuS2t+68RCC698gNsQPW8ZuXD9scYWNS0DmDlaB37094nPd1\r\nQuUyT7CNdgBHDnoX8Oa5aZpEo62T4Louv4yXeipQfDSuCP6B/eTzxag711l0\r\nR/b04sw2S917lBNy9NGiZ379OGMKe6DDPc8lgCVgUO8P1IftxUsupUr0C2t+\r\nYjptzReRYx/RO3hkf/vY8y9BHtpHxDyros4e3yFMmmhNG/MQZRw25NaGWiMW\r\nP6CuLc7KeVwNk4d86VCZpl6gupt/VkDyVvw=\r\n=B0pp\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"0029f968ab106a4a54da4d5e23224abdcbb1b6af","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","prepublishOnly":"npm run build && npm run compile && npm run assert_version","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"19.3.0","dependencies":{"md5":"^2.2.1","ufo":"^1.0.0","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.24.1","mocha":"8.4.0","sinon":"13.0.2","rollup":"2.79.1","prettier":"2.7.1","benchmark":"2.1.4","uglify-js":"3.17.4","typescript":"4.9.3","@babel/core":"7.20.5","@babel/register":"7.18.9","@babel/preset-env":"7.20.2","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.7.1_1671838539273_0.44687619850597615","host":"s3://npm-registry-packages"}},"3.8.0":{"name":"@imgix/js-core","version":"3.8.0","license":"BSD-2-Clause","_id":"@imgix/js-core@3.8.0","maintainers":[{"name":"atlawrie","email":"alice.lawrie@imgix.com"},{"name":"imgix-company","email":"developers@imgix.com"},{"name":"czacharias","email":"chris@imgix.com"},{"name":"sherwinski","email":"sherwinhb@gmail.com"},{"name":"cnoble","email":"cnoble@imgix.com"},{"name":"matt-imgix","email":"mlaguardia@imgix.com"},{"name":"heyitsbryanm","email":"matiasbryan@gmail.com"},{"name":"ultimatealf","email":"aacosta@imgix.com"},{"name":"edsz","email":"esanchez@imgix.com"},{"name":"lball","email":"lball@imgix.com"},{"name":"vuryanh","email":"rvu@imgix.com"}],"homepage":"https://github.com/imgix/js-core#readme","bugs":{"url":"https://github.com/imgix/js-core/issues"},"tsd":{"directory":"types"},"dist":{"shasum":"630bc4fba8cb968d8c0e8298a2be71e39d75b8b8","tarball":"https://registry.npmjs.org/@imgix/js-core/-/js-core-3.8.0.tgz","fileCount":11,"integrity":"sha512-kvLmsODQq7W17UuhDIffimlKN+AUTgtQCgD8kpPN0gglvaqR1VZKXl4gB5eAUXgrwNgi5hRDl5XYAMFRPIUztw==","signatures":[{"sig":"MEQCIB+BOXKbOnJ3bZDvE0V63j6wGugAhZhGK7tvKtR0pMbMAiAGNb313YCxxwUiNGe4uBvkAAiXHBAZwyH7tfQ3uv9/qg==","keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA"}],"unpackedSize":109345,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v4.10.10\r\nComment: https://openpgpjs.org\r\n\r\nwsFzBAEBCAAGBQJjwZFIACEJED1NWxICdlZqFiEECWMYAoorWMhJKdjhPU1b\r\nEgJ2VmoSqg/8DwXxyxz6CRwKs1ABFNGL3Y9z7uOKeezYfCufxi3hFzimG81m\r\nReh5kkLdDvhrj9oyduEql9JssivVa8YkKgDA9tqDBbVHjEq9GyZPgkyR1bdt\r\n6uMD8sRQrVhjWEjEmHhoUrdXLKYFWnliUxIKGQSW6uoWT2FKEabM/rgfmyxI\r\nN/sODK4jTpxKm3dRJ3aOS7Vtpogz0xQ4ICa9omnGz5sD3nJk444UVE380YID\r\nQHqxD4HZkSj/WRcOjGQKIorOhlEhRJx3HA+6g4+JI66kKDHUZpnJmzxrWq+s\r\nmwM2XC5W7Gcf0LRqJMgsW9xPb52e9ZXaApDQUf5CQq+GkL5B+a5U+pyKg2FJ\r\nwJBjM/dO+K+Qvsha/uZJ2HyMIN1H8tAP/XBQO/CBHJqa1VZTceJnWedim6+f\r\n1Ki3nY3qL/T5/XiAonxrRB1+PTbyE7Kko7/y2WMeKFVKcIA5xRUwZsQV9i03\r\npyL4rBUxiIgNcly19Gt1NTpQ/4Cd9Lgoy1o/SshhJhr5KDz+W/pqiLCaylja\r\nCNMUWvAID+iWy0FvRyimI+BpI1DihwUXhWbLKlE7ngEXJ/MOhB3YQfByPomB\r\n/s4bxax/PPxmn5+yf/H0PBdEZc42bsLliphXpRYjbfTfFnplOXmx7fD42aqH\r\neFAXOOvxnyZ3MTF9zJLqAEnOLh2KIUF8Qg8=\r\n=a9kd\r\n-----END PGP SIGNATURE-----\r\n"},"main":"dist/index.cjs.js","types":"dist/index.d.ts","module":"dist/index.esm.js","gitHead":"ba2ec87b4047aa52a19fab11f6f5f38e6b137b5e","release":{"plugins":["@semantic-release/commit-analyzer","@semantic-release/release-notes-generator",["@google/semantic-release-replace-plugin",{"replacements":[{"to":"const VERSION = '${nextRelease.version}'","from":"const VERSION = '.*'","files":["src/constants.js"],"results":[{"file":"src/constants.js","hasChanged":true,"numMatches":1,"numReplacements":1}],"countMatches":true}]}],"@semantic-release/changelog","@semantic-release/npm",["@semantic-release/git",{"assets":["src/**","dist/**","package.json","changelog.md"],"message":"chore(release): ${nextRelease.version}\n\n${nextRelease.notes} [skip ci]"}],["@semantic-release/github",{"assets":[{"path":"dist/imgix-js-core.umd.js","label":"Standalone UMD build"},{"path":"dist/index.cjs.js","label":"Standalone CJS build"},{"path":"dist/index.esm.js","label":"Standalone ESM build"},{"path":"dist/index.d.ts","label":"Type declarations file"}]}]],"branches":["main",{"name":"next","prerelease":"rc"},{"name":"beta","prerelease":true},{"name":"alpha","prerelease":true}]},"scripts":{"dev":"rollup -c -w","tsd":"echo Running tsd; tsd","test":"mocha --require esm --recursive ./test/*.js && npm run tsd","build":"rollup -c","pretty":"prettier --write '{src,test,types}/**/*.{js,ts}'","compile":"cp ./types/index.d.ts ./dist/index.d.ts && tsc","prepare":"npm run build && npm run compile && npm run assert_version","pretest":"npm run build","test:watch":"mocha --require esm --recursive ./test/*.js --watch","assert_version":"node assert_version.cjs","prepublishOnly":"npm run build && npm run compile && npm run assert_version","release:dryRun":"npx node-env-run --exec 'semantic-release --dryRun'","release:publish":"semantic-release","test:performance":"mocha --require esm --recursive test/performance/*.js"},"_npmUser":{"name":"imgix-company","email":"developers@imgix.com"},"repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"_npmVersion":"7.20.3","description":"A JavaScript client library for generating image URLs with imgix","directories":{},"_nodeVersion":"19.3.0","dependencies":{"md5":"^2.2.1","ufo":"^1.0.0","js-base64":"~3.7.0"},"publishConfig":{"access":"public"},"_hasShrinkwrap":false,"devDependencies":{"esm":"3.2.25","tsd":"0.24.1","mocha":"8.4.0","sinon":"13.0.2","rollup":"2.79.1","prettier":"2.7.1","benchmark":"2.1.4","uglify-js":"3.17.4","typescript":"4.9.4","@babel/core":"7.20.7","@babel/register":"7.18.9","@babel/preset-env":"7.20.2","rollup-plugin-babel":"4.4.0","rollup-plugin-uglify":"6.0.4","@semantic-release/git":"9.0.1","@semantic-release/npm":"7.1.3","rollup-plugin-commonjs":"10.1.0","@semantic-release/github":"7.2.3","rollup-plugin-node-resolve":"5.2.0","@semantic-release/changelog":"5.0.1","@semantic-release/commit-analyzer":"8.0.1","@google/semantic-release-replace-plugin":"1.1.0","@semantic-release/release-notes-generator":"9.0.3"},"_npmOperationalInternal":{"tmp":"tmp/js-core_3.8.0_1673630023955_0.20926141799573128","host":"s3://npm-registry-packages"}}},"time":{"created":"2021-02-26T19:37:58.272Z","modified":"2024-09-25T17:24:46.226Z","3.0.0-beta.2":"2021-02-26T19:37:58.689Z","3.0.0-beta.3":"2021-03-01T23:18:04.685Z","3.0.0-beta.4":"2021-03-05T01:00:58.633Z","3.0.0":"2021-03-09T16:52:17.304Z","3.1.0":"2021-03-09T22:00:10.170Z","3.1.1":"2021-03-23T22:35:59.584Z","3.1.2":"2021-03-25T21:01:59.054Z","3.1.3":"2021-03-25T21:36:49.045Z","3.2.0":"2021-06-22T21:09:21.893Z","3.2.1":"2021-06-28T21:39:20.936Z","3.3.0-rc.1":"2021-07-07T19:21:14.265Z","3.3.0":"2021-07-08T18:58:59.901Z","3.3.1-rc.1":"2021-07-22T17:54:49.620Z","3.2.2":"2021-12-07T11:23:10.104Z","3.4.0":"2021-12-16T15:33:14.530Z","3.5.0":"2022-02-24T18:12:25.055Z","3.5.1":"2022-02-25T19:48:46.824Z","3.6.0-rc.1":"2022-03-02T23:03:11.741Z","3.6.0":"2022-04-21T20:35:06.728Z","3.6.1-rc.1":"2022-10-03T17:26:14.413Z","3.6.1":"2022-10-11T17:26:31.557Z","3.7.0":"2022-10-31T20:04:33.635Z","3.7.1":"2022-12-23T23:35:39.461Z","3.8.0":"2023-01-13T17:13:44.146Z"},"bugs":{"url":"https://github.com/imgix/js-core/issues"},"license":"BSD-2-Clause","homepage":"https://github.com/imgix/js-core#readme","repository":{"url":"git+https://github.com/imgix/js-core.git","type":"git"},"description":"A JavaScript client library for generating image URLs with imgix","maintainers":[{"email":"matthewlaguardia@gmail.com","name":"mateo222"},{"email":"rvu@imgix.com","name":"vuryanh"},{"email":"ahmed.abuayisheh@imgix.com","name":"ahmedabu"},{"email":"arnofkd93@gmail.com","name":"arno_fukuda"},{"email":"glenn.smits@imgix.com","name":"gsmits"},{"email":"alice.lawrie@imgix.com","name":"atlawrie"},{"email":"developers@imgix.com","name":"imgix-company"},{"email":"chris@imgix.com","name":"czacharias"},{"email":"sherwinhb@gmail.com","name":"sherwinski"},{"email":"cnoble@imgix.com","name":"cnoble"},{"email":"matiasbryan@gmail.com","name":"heyitsbryanm"},{"email":"aacosta@imgix.com","name":"ultimatealf"},{"email":"esanchez@imgix.com","name":"edsz"},{"email":"lball@imgix.com","name":"lball"}],"readme":"<!-- ix-docs-ignore -->\n\n![imgix logo](https://assets.imgix.net/sdk-imgix-logo.svg)\n\n`@imgix/js-core` is a JavaScript library for generating image URLs with [imgix](https://www.imgix.com/) that can be used in browser or server-side settings.\n\n[![NPM Version](https://img.shields.io/npm/v/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Build Status](https://circleci.com/gh/imgix/js-core.svg?style=shield)](https://circleci.com/gh/imgix/js-core)\n[![Monthly Downloads](https://img.shields.io/npm/dm/imgix-core-js.svg)](https://www.npmjs.com/package/@imgix/js-core)\n[![Minified Size](https://img.shields.io/bundlephobia/min/imgix-core-js)](https://bundlephobia.com/result?p=imgix-core-js)\n[![License](https://img.shields.io/github/license/imgix/js-core)](https://github.com/imgix/js-core/blob/main/LICENSE.md)\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=shield)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_shield)\n\n---\n\n<!-- /ix-docs-ignore -->\n\n<!-- NB: Run `npx markdown-toc README.md --maxdepth 4 | sed -e 's/[[:space:]]\\{2\\}/    /g' | pbcopy` to generate TOC :) -->\n\n<!-- prettier-ignore-start -->\n\n- [Installing](#installing)\n- [Usage](#usage)\n    * [CommonJS](#commonjs)\n    * [ES6 Modules](#es6-modules)\n    * [In-browser](#in-browser)\n- [Configuration](#configuration)\n- [API](#api)\n    * [`ImgixClient.buildURL(path, params, options)`](#imgixclientbuildurlpath-params-options)\n    * [`ImgixClient.buildSrcSet(path, params, options)`](#imgixclientbuildsrcsetpath-params-options)\n        + [Fixed Image Rendering](#fixed-image-rendering)\n        + [Custom Widths](#custom-widths)\n        + [Width Tolerance](#width-tolerance)\n        + [Minimum and Maximum Width Ranges](#minimum-and-maximum-width-ranges)\n        + [Variable Qualities](#variable-qualities)\n        + [Disable Path Encoding](#disable-path-encoding)\n    * [Web Proxy Sources](#web-proxy-sources)\n- [What is the `Ixlib` Param on Every Request?](#what-is-the-ixlib-param-on-every-request)\n- [Support for Management API](#support-for-management-api)\n- [Testing](#testing)\n- [License](#license)\n\n<!-- prettier-ignore-end -->\n\n## Installing\n\n@imgix/js-core can be installed via npm:\n\n```bash\nnpm install @imgix/js-core\n```\n\n## Usage\n\nDepending on your module system, using @imgix/js-core is done a few different ways. The most common entry point will be the `ImgixClient` class. Whenever you provide data to `ImgixClient`, make sure it is not already URL-encoded, as the library handles proper encoding internally.\n\n### CommonJS\n\n```js\nconst ImgixClient = require('@imgix/js-core');\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', {\n  w: 400,\n  h: 300,\n});\n\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300&s=…\"\n```\n\n### ES6 Modules\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: '<SECURE TOKEN>',\n});\n\nconst url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => 'https://testing.imgix.net/users/1.png?w=400&h=300&s=…'\n```\n\n### In-browser\n\n```js\nvar client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  // Do not use signed URLs with `secureURLToken` on the client side,\n  // as this would leak your token to the world. Signed URLs should\n  // be generated on the server.\n});\n\nvar url = client.buildURL('/path/to/image.png', { w: 400, h: 300 });\nconsole.log(url); // => \"https://testing.imgix.net/users/1.png?w=400&h=300\"\n```\n\n## Configuration\n\nThe following options can be used when creating an instance of `ImgixClient`:\n\n- **`domain`:** String, required. The imgix domain that will be used when constructing URLs. Defaults to `null`.\n- **`useHTTPS`:** Boolean. Specifies whether constructed URLs should use the HTTPS protocol. Defaults to `true`.\n- **`includeLibraryParam`:** Boolean. Specifies whether the constructed URLs will include an [`ixlib` parameter](#what-is-the-ixlib-param-on-every-request). Defaults to `true`.\n- **`secureURLToken`:** String. When specified, this token will be used to sign images. Read more about securing images [on the imgix Docs site](https://docs.imgix.com/setup/securing-images). Defaults to `null`.\n  - :warning: *The `secureURLToken` option should only be used in server-side applications to prevent exposing your secure token.* :warning:\n\n\n## API\n\n### `ImgixClient.buildURL(path, params, options)`\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of modifiers, described below:\n  - [**`disablePathEncoding`**](#disable-path-encoding): Boolean. Disables encoding logic applied to the image path.\n  - [**`encoder`**](#encoder): Function. Applies custom logic to encode the image path and query parameters.\n\nConstruct a single image URL by passing in the image `path` and any rendering API parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst url = client.buildURL('folder/image.jpg', {\n  w: 1000,\n});\n```\n\n**Returns**: an image URL as a string.\n\n```html\nhttps://testing.imgix.net/folder/image.jpg?w=1000&ixlib=js-...\n```\n\n### `ImgixClient.buildSrcSet(path, params, options)`\n\n<!-- prettier-ignore-start -->\n\n- **`path`:** String, required. A full, unencoded path to the image. This includes any additional directory information required to [locate the image](https://docs.imgix.com/setup/serving-images) within a source.\n- **`params`:** Object. Any number of imgix rendering API [parameters](https://docs.imgix.com/apis/url).\n- **`options`:** Object. Any number of srcset modifiers, described below:\n  - [**`widths`**](#custom-widths)\n  - [**`widthTolerance`**](#width-tolerance)\n  - [**`minWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`maxWidth`**](#minimum-and-maximum-width-ranges)\n  - [**`disableVariableQuality`**](#variable-qualities)\n  - [**`devicePixelRatios`**](#fixed-image-rendering)\n  - [**`variableQualities`**](#variable-qualities)\n  - [**`disablePathEncoding`**](#disable-path-encoding)\n\n<!-- prettier-ignore-end -->\n\nThe @imgix/js-core module allows for generation of custom `srcset` attributes, which can be invoked through `buildSrcSet()`. By default, the `srcset` generated will allow for responsive size switching by building a list of image-width mappings.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n});\n\nconst srcset = client.buildSrcSet('image.jpg');\n\nconsole.log(srcset);\n```\n\n**Returns**: A `srcset` attribute value as a string.\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&s=e2e581a39c917bdee50b2f8689c30893 100w,\nhttps://testing.imgix.net/image.jpg?w=116&s=836e0bc15da2ad74af8130d93a0ebda6 116w,\nhttps://testing.imgix.net/image.jpg?w=134&s=688416d933381acda1f57068709aab79 134w,\n                                            ...\nhttps://testing.imgix.net/image.jpg?w=7400&s=91779d82a0e1ac16db04c522fa4017e5 7400w,\nhttps://testing.imgix.net/image.jpg?w=8192&s=59eb881b618fed314fe30cf9e3ec7b00 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Fixed Image Rendering\n\nSpecifying either a `w` or a `h` parameter to `buildSrcSet()` will create a DPR-based srcset. This DPR-based srcset allows for the fixed-sized image to be served at different resolutions (i.e. at different pixel densities).\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {\n  h: 800,\n  ar: '3:2',\n  fit: 'crop',\n});\n\nconsole.log(srcset);\n```\n\nWill produce the following attribute value:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74 1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82 2x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=3&s=8b93ab83d3f1ede4887e6826112d60d1 3x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=4&s=df7b67aa0439588edbfc1c249b3965d6 4x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=5&s=7c4b8adb733db37d00240da4ca65d410 5x\n```\n\n<!-- prettier-ignore-end -->\n\nBy default, this library generates a `srcset` with pixel density values of `1` through `5`.\nThese target ratios can be controlled by using the `devicePixelRatios` parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n  secureURLToken: 'my-token',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {\n    h: 800,\n    ar: '3:2',\n    fit: 'crop',\n  },\n  {\n    devicePixelRatios: [1, 2],\n  },\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=1&s=3d754a157458402fd3e26977107ade74\n1x,\nhttps://testing.imgix.net/image.jpg?h=800&ar=3%3A2&fit=crop&dpr=2&s=a984ad1a81d24d9dd7d18195d5262c82\n2x\n```\n\nFor more information to better understand `srcset`, we highly recommend [Eric Portis' \"Srcset and sizes\" article](https://ericportis.com/posts/2014/srcset-sizes/) which goes into depth about the subject.\n\n#### Custom Widths\n\nIn situations where specific widths are desired when generating `srcset` pairs, a user can specify them by passing an array of positive integers as `widths` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { widths: [100, 500, 1000, 1800] },\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following `srcset` of width pairs:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=1000 1000w,\nhttps://testing.imgix.net/image.jpg?w=1800 1800w\n```\n\n**Note:** that in situations where a `srcset` is being rendered as a [fixed image](#fixed-image-rendering), any custom `widths` passed in will be ignored. Additionally, if both `widths` and a `widthTolerance` are passed to the `buildSrcSet` method, the custom widths list will take precedence.\n\n#### Width Tolerance\n\nThe `srcset` width tolerance dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.\n\nBy default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as `widthTolerance` to the third options object:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet('image.jpg', {}, { widthTolerance: 0.2 });\n\nconsole.log(srcset);\n```\n\nIn this case, the `width_tolerance` is set to 20 percent, which will be reflected in the difference between subsequent widths in a srcset pair:\n\n<!-- prettier-ignore-start -->\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100 100w,\nhttps://testing.imgix.net/image.jpg?w=140 140w,\nhttps://testing.imgix.net/image.jpg?w=196 196w,\n          ...\nhttps://testing.imgix.net/image.jpg?w=8192 8192w\n```\n\n<!-- prettier-ignore-end -->\n\n#### Minimum and Maximum Width Ranges\n\nIn certain circumstances, you may want to limit the minimum or maximum value of the non-fixed `srcset` generated by the `buildSrcSet()` method. To do this, you can pass in an options object as a third argument, providing positive integers as `minWidth` and/or `maxWidth` attributes:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  {},\n  { minWidth: 500, maxWidth: 2000 },\n);\n\nconsole.log(srcset);\n```\n\nWill result in a smaller, more tailored srcset.\n\n```html\nhttps://testing.imgix.net/image.jpg?w=500 500w,\nhttps://testing.imgix.net/image.jpg?w=580 580w,\nhttps://testing.imgix.net/image.jpg?w=672 672w,\nhttps://testing.imgix.net/image.jpg?w=780 780w,\nhttps://testing.imgix.net/image.jpg?w=906 906w,\nhttps://testing.imgix.net/image.jpg?w=1050 1050w,\nhttps://testing.imgix.net/image.jpg?w=1218 1218w,\nhttps://testing.imgix.net/image.jpg?w=1414 1414w,\nhttps://testing.imgix.net/image.jpg?w=1640 1640w,\nhttps://testing.imgix.net/image.jpg?w=1902 1902w,\nhttps://testing.imgix.net/image.jpg?w=2000 2000w\n```\n\nRemember that browsers will apply a device pixel ratio as a multiplier when selecting which image to download from a `srcset`. For example, even if you know your image will render no larger than 1000px, specifying `options: { max_srcset: 1000 }` will give your users with DPR higher than 1 no choice but to download and render a low-resolution version of the image. Therefore, it is vital to factor in any potential differences when choosing a minimum or maximum range.\n\n**Note:** that according to the [imgix API](https://docs.imgix.com/apis/url/size/w), the maximum renderable image width is 8192 pixels.\n\n#### Variable Qualities\n\nThis library will automatically append a variable `q` parameter mapped to each `dpr` parameter when generating a [fixed-image](https://github.com/imgix/js-core#fixed-image-rendering) srcset. This technique is commonly used to compensate for the increased filesize of high-DPR images. Since high-DPR images are displayed at a higher pixel density on devices, image quality can be lowered to reduce overall filesize without sacrificing perceived visual quality. For more information and examples of this technique in action, see [this blog post](https://blog.imgix.com/2016/03/30/dpr-quality).\n\nThis behavior will respect any overriding `q` value passed in as a parameter. Additionally, it can be disabled altogether by passing `{ disableVariableQuality: true }` to the third argument of `buildSrcSet()`.\n\nThis behavior specifically occurs when a [fixed-size image](https://github.com/imgix/js-core#fixed-image-rendering) is rendered, for example:\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet('image.jpg', { w: 100 });\n\nconsole.log(srcset);\n```\n\nWill generate a srcset with the following `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=75 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=50 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=35 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=23 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=20 5x\n```\n\nQuality parameters is overridable for each `dpr` by passing `variableQualities` parameters.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst srcset = client.buildSrcSet(\n  'image.jpg',\n  { w: 100 },\n  { variableQualities: { 1: 45, 2: 30, 3: 20, 4: 15, 5: 10 } },\n);\n\nconsole.log(srcset);\n```\n\nWill generate the following custom `q` to `dpr` mapping:\n\n```html\nhttps://testing.imgix.net/image.jpg?w=100&dpr=1&q=45 1x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=2&q=30 2x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=3&q=20 3x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=4&q=15 4x,\nhttps://testing.imgix.net/image.jpg?w=100&dpr=5&q=10 5x\n```\n\n#### Disable Path Encoding\n\nThis library will encode by default all paths passed to both `buildURL` and `buildSrcSet` methods. To disable path encoding, pass `{ disablePathEncoding: true }` to the third argument `options` of `buildURL()` or `buildSrcSet()`.\n\n```js\nconst client = new ImgixClient({\n  domain: 'testing.imgix.net',\n});\n\nconst src = client.buildURL(\n  'file+with%20some+crazy?things.jpg',\n  {},\n  { disablePathEncoding: true },\n);\nconsole.log(src);\n\nconst srcset = client.buildSrcSet(\n  'file+with%20some+crazy?things.jpg',\n  {},\n  { disablePathEncoding: true },\n);\nconsole.log(srcset);\n```\n\nNormally this would output a src of `https://testing.imgix.net/file%2Bwith%2520some%2Bcrazy%3Fthings.jpg`, but since path encoding is disabled, it will output a src of `https://testing.imgix.net/file+with%20some+crazy?things.jpg`.\n\n### Custom URL encoding\n\nThis library will encode by default using `encodeURI()`,  `encodeURIComponent()`, or a combination of the two depending on the image path and parameters.\nYou can define a custom encoding function in `buildURL's `options` object **if** you wish to override this behavior. Note that encoding your own URL can result in a URL that is **not** recognized by the imgix rendering API.\n\n```js\nconst ImgixClient = require(\"@imgix/js-core\");\nconst client = new ImgixClient({\n  domain: 'test.imgix.com',\n  secureURLToken: 'xxxxxxxx',\n});\n\nclient.buildURL(\n  \"https://proxy.imgix.net/image.jpg\",\n  {\n    \"txt\": \"test!(')*\"\n  },\n  {\n    encoder: (path) => encodeURI(path).replace(\"'\", \"%27\")\n  }\n)\n\n/*\n  output:\n  https://proxy.imgix.net/image.jpg?txt=test!(%27)\n*/\n\n```\n\nThe custom encoder also accepts a second optional parameter `key` which allows users to modify how query parameters are encoded. This parameter does not affect the custom encoding logic of the image path.\n\n```js\nconst ImgixClient = require(\"@imgix/js-core\");\nconst client = new ImgixClient({\n  domain: 'test.imgix.com',\n  secureURLToken: 'xxxxxxxx',\n});\n\nclient.buildURL(\n  \"https://proxy.imgix.net/image.jpg\",\n  {\n    \"txt\": \"test!(')*\"\n  },\n  {\n    encoder: (value, key) => key?.substr(-2) === '64' ? Base64.encodeURI(value) : value.replace(' ', \"+\")\n  }\n)\n```\n\n### Web Proxy Sources\n\nIf you are using a [Web Proxy Source](https://docs.imgix.com/setup/creating-sources/web-proxy), all you need to do is pass the full image URL you would like to proxy to `@imgix/js-core` as the path, and include a `secureURLToken` when creating the client. `@imgix/js-core` will then encode this full URL into a format that imgix will understand, thus creating a proxy URL for you.\n\n```js\nimport ImgixClient from '@imgix/js-core';\n\nconst client = new ImgixClient({\n  domain: 'my-proxy-domain.imgix.net',\n  secureURLToken: '<token>',\n});\n\nclient.buildURL('https://example.com/image-to-proxy.jpg', {});\nclient.buildSrcSet('https://example.com/image-to-proxy.jpg', {});\n```\n\n## What is the `Ixlib` Param on Every Request?\n\nFor security and diagnostic purposes, we sign all requests with the language and version of library used to generate the URL.\n\nThis can be disabled by passing a falsy value for the `includeLibraryParam` option to `new ImgixClient`:\n\n```js\nnew ImgixClient({\n  domain: 'my-source.imgix.net',\n  includeLibraryParam: false,\n});\n```\n\n## Support for Management API\n\nUsers looking for client library support for the imgix [management API](https://docs.imgix.com/apis/management) should use the [imgix-management-js](https://github.com/imgix/imgix-management-js) library. These two projects may be merged at a future date.\n\n## Testing\n\n@imgix/js-core uses mocha for testing. Here’s how to run those tests:\n\n```bash\nnpm test\n```\n\n## License\n\n[![FOSSA Status](https://app.fossa.com/api/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js.svg?type=large)](https://app.fossa.com/projects/git%2Bgithub.com%2Fimgix%2Fimgix-core-js?ref=badge_large)\n","readmeFilename":"README.md"}